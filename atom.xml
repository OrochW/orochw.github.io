<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://orochw.github.io</id>
    <title>Gridea</title>
    <updated>2021-05-17T07:36:36.619Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://orochw.github.io"/>
    <link rel="self" href="https://orochw.github.io/atom.xml"/>
    <subtitle>OrochW Blog</subtitle>
    <logo>https://orochw.github.io/images/avatar.png</logo>
    <icon>https://orochw.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[nginx一键编译脚本]]></title>
        <id>https://orochw.github.io/post/nginx-yi-jian-bian-yi-jiao-ben/</id>
        <link href="https://orochw.github.io/post/nginx-yi-jian-bian-yi-jiao-ben/">
        </link>
        <updated>2021-05-17T07:24:50.000Z</updated>
        <content type="html"><![CDATA[<pre><code>############  安装nginx
yum install -y  pcre pcre-devel zlib zlib-devel openssl openssl-devel autoconf automake make
useradd -s /sbin/nologin nginx
cd /usr/local/src
wget http://nginx.org/download/nginx-1.16.0.tar.gz
tar -xf nginx-1.16.0.tar.gz
cd nginx-1.16.0
./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_realip_module --with-http_stub_status_module --with-http_gzip_static_module --with-http_ssl_module  --with-http_flv_module --with-stream --with-threads --with-stream_realip_module --with-stream_ssl_module --with-file-aio
make &amp;&amp; make install




------- 配置环境变量 ----------
cat &lt;&lt;'EOF' &gt; /etc/profile.d/nginx.sh
export NGINX_HOME=/usr/local/nginx
export PATH=$NGINX_HOME/sbin:$PATH
EOF
source /etc/profile

-------- 配置成系统服务 ------------
cat &lt;&lt;EOF &gt; /usr/lib/systemd/system/nginx.service
[Unit]
Description=nginx - high performance web server
Documentation=http://nginx.org/en/docs/
After=network.target remote-fs.target nss-lookup.target


[Service]
Type=forking
ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf
ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
ExecReload=/usr/local/nginx/sbin/nginx -s reload
ExecStop=/usr/local//nginx/sbin/nginx -s quit
PrivateTmp=true

[Install]
WantedBy=multi-user.target

EOF
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PPTP一键脚本]]></title>
        <id>https://orochw.github.io/post/pptp-yi-jian-jiao-ben/</id>
        <link href="https://orochw.github.io/post/pptp-yi-jian-jiao-ben/">
        </link>
        <updated>2021-05-17T06:18:42.000Z</updated>
        <content type="html"><![CDATA[<pre><code>#在X-shell中先安装lrzsz yum -y install lrzsz
#!/bin/bash
#
# Author:  yeho &lt;lj2007331 AT gmail.com&gt;
# Blog:  https://blog.linuxeye.com
#
# Installs a PPTP VPN-only system for CentOS

# Check if user is root
[ $(id -u) != &quot;0&quot; ] &amp;&amp; { echo -e &quot;\033[31mError: You must be root to run this script\033[0m&quot;; exit 1; } 

export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
clear
printf &quot;
#######################################################################
#    LNMP/LAMP/LANMP for CentOS/RedHat 5+ Debian 6+ and Ubuntu 12+    #
#            Installs a PPTP VPN-only system for CentOS               #
# For more information please visit https://blog.linuxeye.com/31.html #
#######################################################################
&quot;

[ ! -e '/usr/bin/curl' ] &amp;&amp; yum -y install curl

VPN_IP=`curl ipv4.icanhazip.com`

VPN_USER=&quot;linuxeye&quot;
VPN_PASS=&quot;linuxeye&quot;

VPN_LOCAL=&quot;192.168.100.1&quot;
VPN_REMOTE=&quot;192.168.100.50-250&quot;

while :; do echo
    read -p &quot;Please input username: &quot; VPN_USER 
    [ -n &quot;$VPN_USER&quot; ] &amp;&amp; break
done

while :; do echo
    read -p &quot;Please input password: &quot; VPN_PASS
    [ -n &quot;$VPN_PASS&quot; ] &amp;&amp; break
done
clear


if [ -f /etc/redhat-release -a -n &quot;`grep ' 7\.' /etc/redhat-release`&quot; ];then
    #CentOS_REL=7
    if [ ! -e /etc/yum.repos.d/epel.repo ];then
        cat &gt; /etc/yum.repos.d/epel.repo &lt;&lt; EOF
[epel]
name=Extra Packages for Enterprise Linux 7 - \$basearch
#baseurl=http://download.fedoraproject.org/pub/epel/7/\$basearch
mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;arch=\$basearch
failovermethod=priority
enabled=1
gpgcheck=0
EOF
    fi
    for Package in wget make openssl gcc-c++ ppp pptpd iptables iptables-services 
    do
        yum -y install $Package
    done
    echo 'net.ipv4.ip_forward = 1' &gt;&gt; /etc/sysctl.conf
elif [ -f /etc/redhat-release -a -n &quot;`grep ' 6\.' /etc/redhat-release`&quot; ];then
    #CentOS_REL=6
    for Package in wget make openssl gcc-c++ iptables ppp 
    do
        yum -y install $Package
    done
    sed -i 's@net.ipv4.ip_forward.*@net.ipv4.ip_forward = 1@g' /etc/sysctl.conf
    rpm -Uvh http://poptop.sourceforge.net/yum/stable/rhel6/pptp-release-current.noarch.rpm
    yum -y install pptpd
else
    echo -e &quot;\033[31mDoes not support this OS, Please contact the author! \033[0m&quot;
    exit 1
fi

echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward

sysctl -p /etc/sysctl.conf

[ -z &quot;`grep '^localip' /etc/pptpd.conf`&quot; ] &amp;&amp; echo &quot;localip $VPN_LOCAL&quot; &gt;&gt; /etc/pptpd.conf # Local IP address of your VPN server
[ -z &quot;`grep '^remoteip' /etc/pptpd.conf`&quot; ] &amp;&amp; echo &quot;remoteip $VPN_REMOTE&quot; &gt;&gt; /etc/pptpd.conf # Scope for your home network
[ -z &quot;`grep '^stimeout' /etc/pptpd.conf`&quot; ] &amp;&amp; echo &quot;stimeout 172800&quot; &gt;&gt; /etc/pptpd.conf

if [ -z &quot;`grep '^ms-dns' /etc/ppp/options.pptpd`&quot; ];then
     cat &gt;&gt; /etc/ppp/options.pptpd &lt;&lt; EOF
ms-dns 1.1.1.1
#ms-dns 1.0.0.1
ms-dns 8.8.8.8 # Google DNS Primary
#ms-dns 8.8.4.4
ms-dns 114.114.114.114
#ms-dns 119.29.29.29

EOF
fi

echo &quot;$VPN_USER pptpd $VPN_PASS *&quot; &gt;&gt; /etc/ppp/chap-secrets

ETH=`route | grep default | awk '{print $NF}'`
[ -z &quot;`grep '1723 -j ACCEPT' /etc/sysconfig/iptables`&quot; ] &amp;&amp; iptables -I INPUT 4 -p tcp -m state --state NEW -m tcp --dport 1723 -j ACCEPT
[ -z &quot;`grep 'gre -j ACCEPT' /etc/sysconfig/iptables`&quot; ] &amp;&amp; iptables -I INPUT 5 -p gre -j ACCEPT 
iptables -t nat -A POSTROUTING -o $ETH -j MASQUERADE
iptables -I FORWARD -p tcp --syn -i ppp+ -j TCPMSS --set-mss 1356
service iptables save
sed -i 's@^-A INPUT -j REJECT --reject-with icmp-host-prohibited@#-A INPUT -j REJECT --reject-with icmp-host-prohibited@' /etc/sysconfig/iptables 
sed -i 's@^-A FORWARD -j REJECT --reject-with icmp-host-prohibited@#-A FORWARD -j REJECT --reject-with icmp-host-prohibited@' /etc/sysconfig/iptables 
service iptables restart
chkconfig iptables on

service pptpd restart
chkconfig pptpd on
clear

echo -e &quot;You can now connect to your VPN via your external IP \033[32m${VPN_IP}\033[0m&quot;

echo -e &quot;Username: \033[32m${VPN_USER}\033[0m&quot;
echo -e &quot;Password: \033[32m${VPN_PASS}\033[0m&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[l2tp一键脚本]]></title>
        <id>https://orochw.github.io/post/l2tp-yi-jian-jiao-ben/</id>
        <link href="https://orochw.github.io/post/l2tp-yi-jian-jiao-ben/">
        </link>
        <updated>2021-05-17T06:17:02.000Z</updated>
        <content type="html"><![CDATA[<pre><code>#!/usr/bin/env bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
#=======================================================================#
#   System Supported:  CentOS 6+ / Debian 7+ / Ubuntu 12+               #
#   Description: L2TP VPN Auto Installer                                #
#=======================================================================#
cur_dir=`pwd`

libreswan_filename=&quot;libreswan-3.27&quot;
download_root_url=&quot;https://dl.lamp.sh/files&quot;

rootness(){
    if [[ $EUID -ne 0 ]]; then
       echo &quot;Error:This script must be run as root!&quot; 1&gt;&amp;2
       exit 1
    fi
}

tunavailable(){
    if [[ ! -e /dev/net/tun ]]; then
        echo &quot;Error:TUN/TAP is not available!&quot; 1&gt;&amp;2
        exit 1
    fi
}

disable_selinux(){
if [ -s /etc/selinux/config ] &amp;&amp; grep 'SELINUX=enforcing' /etc/selinux/config; then
    sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
    setenforce 0
fi
}

get_opsy(){
    [ -f /etc/redhat-release ] &amp;&amp; awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release &amp;&amp; return
    [ -f /etc/os-release ] &amp;&amp; awk -F'[= &quot;]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release &amp;&amp; return
    [ -f /etc/lsb-release ] &amp;&amp; awk -F'[=&quot;]+' '/DESCRIPTION/{print $2}' /etc/lsb-release &amp;&amp; return
}

get_os_info(){
    IP=$( ip addr | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | egrep -v &quot;^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\.&quot; | head -n 1 )
    [ -z ${IP} ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )

    local cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//' )
    local cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
    local freq=$( awk -F: '/cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//' )
    local tram=$( free -m | awk '/Mem/ {print $2}' )
    local swap=$( free -m | awk '/Swap/ {print $2}' )
    local up=$( awk '{a=$1/86400;b=($1%86400)/3600;c=($1%3600)/60;d=$1%60} {printf(&quot;%ddays, %d:%d:%d\n&quot;,a,b,c,d)}' /proc/uptime )
    local load=$( w | head -1 | awk -F'load average:' '{print $2}' | sed 's/^[ \t]*//;s/[ \t]*$//' )
    local opsy=$( get_opsy )
    local arch=$( uname -m )
    local lbit=$( getconf LONG_BIT )
    local host=$( hostname )
    local kern=$( uname -r )

    echo &quot;########## System Information ##########&quot;
    echo 
    echo &quot;CPU model            : ${cname}&quot;
    echo &quot;Number of cores      : ${cores}&quot;
    echo &quot;CPU frequency        : ${freq} MHz&quot;
    echo &quot;Total amount of ram  : ${tram} MB&quot;
    echo &quot;Total amount of swap : ${swap} MB&quot;
    echo &quot;System uptime        : ${up}&quot;
    echo &quot;Load average         : ${load}&quot;
    echo &quot;OS                   : ${opsy}&quot;
    echo &quot;Arch                 : ${arch} (${lbit} Bit)&quot;
    echo &quot;Kernel               : ${kern}&quot;
    echo &quot;Hostname             : ${host}&quot;
    echo &quot;IPv4 address         : ${IP}&quot;
    echo 
    echo &quot;########################################&quot;
}

check_sys(){
    local checkType=$1
    local value=$2

    local release=''
    local systemPackage=''

    if [[ -f /etc/redhat-release ]]; then
        release=&quot;centos&quot;
        systemPackage=&quot;yum&quot;
    elif cat /etc/issue | grep -Eqi &quot;debian&quot;; then
        release=&quot;debian&quot;
        systemPackage=&quot;apt&quot;
    elif cat /etc/issue | grep -Eqi &quot;ubuntu&quot;; then
        release=&quot;ubuntu&quot;
        systemPackage=&quot;apt&quot;
    elif cat /etc/issue | grep -Eqi &quot;centos|red hat|redhat&quot;; then
        release=&quot;centos&quot;
        systemPackage=&quot;yum&quot;
    elif cat /proc/version | grep -Eqi &quot;debian&quot;; then
        release=&quot;debian&quot;
        systemPackage=&quot;apt&quot;
    elif cat /proc/version | grep -Eqi &quot;ubuntu&quot;; then
        release=&quot;ubuntu&quot;
        systemPackage=&quot;apt&quot;
    elif cat /proc/version | grep -Eqi &quot;centos|red hat|redhat&quot;; then
        release=&quot;centos&quot;
        systemPackage=&quot;yum&quot;
    fi

    if [[ ${checkType} == &quot;sysRelease&quot; ]]; then
        if [ &quot;$value&quot; == &quot;$release&quot; ];then
            return 0
        else
            return 1
        fi
    elif [[ ${checkType} == &quot;packageManager&quot; ]]; then
        if [ &quot;$value&quot; == &quot;$systemPackage&quot; ];then
            return 0
        else
            return 1
        fi
    fi
}

rand(){
    index=0
    str=&quot;&quot;
    for i in {a..z}; do arr[index]=${i}; index=`expr ${index} + 1`; done
    for i in {A..Z}; do arr[index]=${i}; index=`expr ${index} + 1`; done
    for i in {0..9}; do arr[index]=${i}; index=`expr ${index} + 1`; done
    for i in {1..10}; do str=&quot;$str${arr[$RANDOM%$index]}&quot;; done
    echo ${str}
}

is_64bit(){
    if [ `getconf WORD_BIT` = '32' ] &amp;&amp; [ `getconf LONG_BIT` = '64' ] ; then
        return 0
    else
        return 1
    fi
}

download_file(){
    if [ -s ${1} ]; then
        echo &quot;$1 [found]&quot;
    else
        echo &quot;$1 not found!!!download now...&quot;
        if ! wget -c -t3 -T60 ${download_root_url}/${1}; then
            echo &quot;Failed to download $1, please download it to ${cur_dir} directory manually and try again.&quot;
            exit 1
        fi
    fi
}

versionget(){
    if [[ -s /etc/redhat-release ]];then
        grep -oE  &quot;[0-9.]+&quot; /etc/redhat-release
    else
        grep -oE  &quot;[0-9.]+&quot; /etc/issue
    fi
}

centosversion(){
    if check_sys sysRelease centos;then
        local code=${1}
        local version=&quot;`versionget`&quot;
        local main_ver=${version%%.*}
        if [ &quot;${main_ver}&quot; == &quot;${code}&quot; ];then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

debianversion(){
    if check_sys sysRelease debian;then
        local version=$( get_opsy )
        local code=${1}
        local main_ver=$( echo ${version} | sed 's/[^0-9]//g')
        if [ &quot;${main_ver}&quot; == &quot;${code}&quot; ];then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

version_check(){
    if check_sys packageManager yum; then
        if centosversion 5; then
            echo &quot;Error: CentOS 5 is not supported, Please re-install OS and try again.&quot;
            exit 1
        fi
    fi
}

get_char(){
    SAVEDSTTY=`stty -g`
    stty -echo
    stty cbreak
    dd if=/dev/tty bs=1 count=1 2&gt; /dev/null
    stty -raw
    stty echo
    stty $SAVEDSTTY
}

preinstall_l2tp(){

    echo
    if [ -d &quot;/proc/vz&quot; ]; then
        echo -e &quot;\033[41;37m WARNING: \033[0m Your VPS is based on OpenVZ, and IPSec might not be supported by the kernel.&quot;
        echo &quot;Continue installation? (y/n)&quot;
        read -p &quot;(Default: n)&quot; agree
        [ -z ${agree} ] &amp;&amp; agree=&quot;n&quot;
        if [ &quot;${agree}&quot; == &quot;n&quot; ]; then
            echo
            echo &quot;L2TP installation cancelled.&quot;
            echo
            exit 0
        fi
    fi
    echo
    echo &quot;Please enter IP-Range:&quot;
    read -p &quot;(Default Range: 192.168.18):&quot; iprange
    [ -z ${iprange} ] &amp;&amp; iprange=&quot;192.168.18&quot;

    echo &quot;Please enter PSK:&quot;
    read -p &quot;(Default PSK: teddysun.com):&quot; mypsk
    [ -z ${mypsk} ] &amp;&amp; mypsk=&quot;teddysun.com&quot;

    echo &quot;Please enter Username:&quot;
    read -p &quot;(Default Username: teddysun):&quot; username
    [ -z ${username} ] &amp;&amp; username=&quot;teddysun&quot;

    password=`rand`
    echo &quot;Please enter ${username}'s password:&quot;
    read -p &quot;(Default Password: ${password}):&quot; tmppassword
    [ ! -z ${tmppassword} ] &amp;&amp; password=${tmppassword}

    echo
    echo &quot;ServerIP:${IP}&quot;
    echo &quot;Server Local IP:${iprange}.1&quot;
    echo &quot;Client Remote IP Range:${iprange}.2-${iprange}.254&quot;
    echo &quot;PSK:${mypsk}&quot;
    echo
    echo &quot;Press any key to start... or press Ctrl + C to cancel.&quot;
    char=`get_char`

}

install_l2tp(){

    mknod /dev/random c 1 9

    if check_sys packageManager apt; then
        apt-get -y update

        if debianversion 7; then
            if is_64bit; then
                local libnspr4_filename1=&quot;libnspr4_4.10.7-1_amd64.deb&quot;
                local libnspr4_filename2=&quot;libnspr4-0d_4.10.7-1_amd64.deb&quot;
                local libnspr4_filename3=&quot;libnspr4-dev_4.10.7-1_amd64.deb&quot;
                local libnspr4_filename4=&quot;libnspr4-dbg_4.10.7-1_amd64.deb&quot;
                local libnss3_filename1=&quot;libnss3_3.17.2-1.1_amd64.deb&quot;
                local libnss3_filename2=&quot;libnss3-1d_3.17.2-1.1_amd64.deb&quot;
                local libnss3_filename3=&quot;libnss3-tools_3.17.2-1.1_amd64.deb&quot;
                local libnss3_filename4=&quot;libnss3-dev_3.17.2-1.1_amd64.deb&quot;
                local libnss3_filename5=&quot;libnss3-dbg_3.17.2-1.1_amd64.deb&quot;
            else
                local libnspr4_filename1=&quot;libnspr4_4.10.7-1_i386.deb&quot;
                local libnspr4_filename2=&quot;libnspr4-0d_4.10.7-1_i386.deb&quot;
                local libnspr4_filename3=&quot;libnspr4-dev_4.10.7-1_i386.deb&quot;
                local libnspr4_filename4=&quot;libnspr4-dbg_4.10.7-1_i386.deb&quot;
                local libnss3_filename1=&quot;libnss3_3.17.2-1.1_i386.deb&quot;
                local libnss3_filename2=&quot;libnss3-1d_3.17.2-1.1_i386.deb&quot;
                local libnss3_filename3=&quot;libnss3-tools_3.17.2-1.1_i386.deb&quot;
                local libnss3_filename4=&quot;libnss3-dev_3.17.2-1.1_i386.deb&quot;
                local libnss3_filename5=&quot;libnss3-dbg_3.17.2-1.1_i386.deb&quot;
            fi
            rm -rf ${cur_dir}/l2tp
            mkdir -p ${cur_dir}/l2tp
            cd ${cur_dir}/l2tp
            download_file &quot;${libnspr4_filename1}&quot;
            download_file &quot;${libnspr4_filename2}&quot;
            download_file &quot;${libnspr4_filename3}&quot;
            download_file &quot;${libnspr4_filename4}&quot;
            download_file &quot;${libnss3_filename1}&quot;
            download_file &quot;${libnss3_filename2}&quot;
            download_file &quot;${libnss3_filename3}&quot;
            download_file &quot;${libnss3_filename4}&quot;
            download_file &quot;${libnss3_filename5}&quot;
            dpkg -i ${libnspr4_filename1} ${libnspr4_filename2} ${libnspr4_filename3} ${libnspr4_filename4}
            dpkg -i ${libnss3_filename1} ${libnss3_filename2} ${libnss3_filename3} ${libnss3_filename4} ${libnss3_filename5}

            apt-get -y install wget gcc ppp flex bison make pkg-config libpam0g-dev libcap-ng-dev iptables \
                               libcap-ng-utils libunbound-dev libevent-dev libcurl4-nss-dev libsystemd-daemon-dev
        else
            apt-get -y install wget gcc ppp flex bison make python libnss3-dev libnss3-tools libselinux-dev iptables \
                               libnspr4-dev pkg-config libpam0g-dev libcap-ng-dev libcap-ng-utils libunbound-dev \
                               libevent-dev libcurl4-nss-dev libsystemd-dev
        fi
        apt-get -y --no-install-recommends install xmlto
        apt-get -y install xl2tpd

        compile_install
    elif check_sys packageManager yum; then
        echo &quot;Adding the EPEL repository...&quot;
        yum -y install epel-release yum-utils
        [ ! -f /etc/yum.repos.d/epel.repo ] &amp;&amp; echo &quot;Install EPEL repository failed, please check it.&quot; &amp;&amp; exit 1
        yum-config-manager --enable epel
        echo &quot;Adding the EPEL repository complete...&quot;

        if centosversion 7; then
            yum -y install ppp libreswan xl2tpd firewalld
            yum_install
        elif centosversion 6; then
            yum -y remove libevent-devel
            yum -y install libevent2-devel
            yum -y install nss-devel nspr-devel pkgconfig pam-devel \
                           libcap-ng-devel libselinux-devel lsof \
                           curl-devel flex bison gcc ppp make iptables gmp-devel \
                           fipscheck-devel unbound-devel xmlto libpcap-devel xl2tpd

            compile_install
        fi
    fi

}

config_install(){

    cat &gt; /etc/ipsec.conf&lt;&lt;EOF
version 2.0

config setup
    protostack=netkey
    nhelpers=0
    uniqueids=no
    interfaces=%defaultroute
    virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:!${iprange}.0/24

conn l2tp-psk
    rightsubnet=vhost:%priv
    also=l2tp-psk-nonat

conn l2tp-psk-nonat
    authby=secret
    pfs=no
    auto=add
    keyingtries=3
    rekey=no
    ikelifetime=8h
    keylife=1h
    type=transport
    left=%defaultroute
    leftid=${IP}
    leftprotoport=17/1701
    right=%any
    rightprotoport=17/%any
    dpddelay=40
    dpdtimeout=130
    dpdaction=clear
    sha2-truncbug=yes
EOF

    cat &gt; /etc/ipsec.secrets&lt;&lt;EOF
%any %any : PSK &quot;${mypsk}&quot;
EOF

    cat &gt; /etc/xl2tpd/xl2tpd.conf&lt;&lt;EOF
[global]
port = 1701

[lns default]
ip range = ${iprange}.2-${iprange}.254
local ip = ${iprange}.1
require chap = yes
refuse pap = yes
require authentication = yes
name = l2tpd
ppp debug = yes
pppoptfile = /etc/ppp/options.xl2tpd
length bit = yes
EOF

    cat &gt; /etc/ppp/options.xl2tpd&lt;&lt;EOF
ipcp-accept-local
ipcp-accept-remote
require-mschap-v2
ms-dns 8.8.8.8
ms-dns 8.8.4.4
noccp
auth
hide-password
idle 1800
mtu 1410
mru 1410
nodefaultroute
debug
proxyarp
connect-delay 5000
EOF

    rm -f /etc/ppp/chap-secrets
    cat &gt; /etc/ppp/chap-secrets&lt;&lt;EOF
# Secrets for authentication using CHAP
# client    server    secret    IP addresses
${username}    l2tpd    ${password}       *
EOF

}

compile_install(){

    rm -rf ${cur_dir}/l2tp
    mkdir -p ${cur_dir}/l2tp
    cd ${cur_dir}/l2tp
    download_file &quot;${libreswan_filename}.tar.gz&quot;
    tar -zxf ${libreswan_filename}.tar.gz

    cd ${cur_dir}/l2tp/${libreswan_filename}
        cat &gt; Makefile.inc.local &lt;&lt;'EOF'
WERROR_CFLAGS =
USE_DNSSEC = false
USE_DH31 = false
USE_GLIBC_KERN_FLIP_HEADERS = true
EOF
    make programs &amp;&amp; make install

    /usr/local/sbin/ipsec --version &gt;/dev/null 2&gt;&amp;1
    if [ $? -ne 0 ]; then
        echo &quot;${libreswan_filename} install failed.&quot;
        exit 1
    fi

    config_install

    cp -pf /etc/sysctl.conf /etc/sysctl.conf.bak

    sed -i 's/net.ipv4.ip_forward = 0/net.ipv4.ip_forward = 1/g' /etc/sysctl.conf

    for each in `ls /proc/sys/net/ipv4/conf/`; do
        echo &quot;net.ipv4.conf.${each}.accept_source_route=0&quot; &gt;&gt; /etc/sysctl.conf
        echo &quot;net.ipv4.conf.${each}.accept_redirects=0&quot; &gt;&gt; /etc/sysctl.conf
        echo &quot;net.ipv4.conf.${each}.send_redirects=0&quot; &gt;&gt; /etc/sysctl.conf
        echo &quot;net.ipv4.conf.${each}.rp_filter=0&quot; &gt;&gt; /etc/sysctl.conf
    done
    sysctl -p

    if centosversion 6; then
        [ -f /etc/sysconfig/iptables ] &amp;&amp; cp -pf /etc/sysconfig/iptables /etc/sysconfig/iptables.old.`date +%Y%m%d`

        if [ &quot;`iptables -L -n | grep -c '\-\-'`&quot; == &quot;0&quot; ]; then
            cat &gt; /etc/sysconfig/iptables &lt;&lt;EOF
# Added by L2TP VPN script
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp --dport 22 -j ACCEPT
-A INPUT -p udp -m multiport --dports 500,4500,1701 -j ACCEPT
-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -s ${iprange}.0/24  -j ACCEPT
COMMIT
*nat
:PREROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING -s ${iprange}.0/24 -j SNAT --to-source ${IP}
COMMIT
EOF
        else
            iptables -I INPUT -p udp -m multiport --dports 500,4500,1701 -j ACCEPT
            iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
            iptables -I FORWARD -s ${iprange}.0/24  -j ACCEPT
            iptables -t nat -A POSTROUTING -s ${iprange}.0/24 -j SNAT --to-source ${IP}
            /etc/init.d/iptables save
        fi

        if [ ! -f /etc/ipsec.d/cert9.db ]; then
           echo &gt; /var/tmp/libreswan-nss-pwd
           certutil -N -f /var/tmp/libreswan-nss-pwd -d /etc/ipsec.d
           rm -f /var/tmp/libreswan-nss-pwd
        fi

        chkconfig --add iptables
        chkconfig iptables on
        chkconfig --add ipsec
        chkconfig ipsec on
        chkconfig --add xl2tpd
        chkconfig xl2tpd on

        /etc/init.d/iptables restart
        /etc/init.d/ipsec start
        /etc/init.d/xl2tpd start

    else
        [ -f /etc/iptables.rules ] &amp;&amp; cp -pf /etc/iptables.rules /etc/iptables.rules.old.`date +%Y%m%d`

        if [ &quot;`iptables -L -n | grep -c '\-\-'`&quot; == &quot;0&quot; ]; then
            cat &gt; /etc/iptables.rules &lt;&lt;EOF
# Added by L2TP VPN script
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp --dport 22 -j ACCEPT
-A INPUT -p udp -m multiport --dports 500,4500,1701 -j ACCEPT
-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -s ${iprange}.0/24  -j ACCEPT
COMMIT
*nat
:PREROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING -s ${iprange}.0/24 -j SNAT --to-source ${IP}
COMMIT
EOF
        else
            iptables -I INPUT -p udp -m multiport --dports 500,4500,1701 -j ACCEPT
            iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
            iptables -I FORWARD -s ${iprange}.0/24  -j ACCEPT
            iptables -t nat -A POSTROUTING -s ${iprange}.0/24 -j SNAT --to-source ${IP}
            /sbin/iptables-save &gt; /etc/iptables.rules
        fi

        cat &gt; /etc/network/if-up.d/iptables &lt;&lt;EOF
#!/bin/sh
/sbin/iptables-restore &lt; /etc/iptables.rules
EOF
        chmod +x /etc/network/if-up.d/iptables

        if [ ! -f /etc/ipsec.d/cert9.db ]; then
           echo &gt; /var/tmp/libreswan-nss-pwd
           certutil -N -f /var/tmp/libreswan-nss-pwd -d /etc/ipsec.d
           rm -f /var/tmp/libreswan-nss-pwd
        fi

        update-rc.d -f xl2tpd defaults

        cp -f /etc/rc.local /etc/rc.local.old.`date +%Y%m%d`
        sed --follow-symlinks -i -e '/^exit 0/d' /etc/rc.local
        cat &gt;&gt; /etc/rc.local &lt;&lt;EOF

# Added by L2TP VPN script
echo 1 &gt; /proc/sys/net/ipv4/ip_forward
/usr/sbin/service ipsec start
exit 0
EOF
        chmod +x /etc/rc.local
        echo 1 &gt; /proc/sys/net/ipv4/ip_forward

        /sbin/iptables-restore &lt; /etc/iptables.rules
        /usr/sbin/service ipsec start
        /usr/sbin/service xl2tpd restart

    fi

}

yum_install(){

    config_install

    cp -pf /etc/sysctl.conf /etc/sysctl.conf.bak

    echo &quot;# Added by L2TP VPN&quot; &gt;&gt; /etc/sysctl.conf
    echo &quot;net.ipv4.ip_forward=1&quot; &gt;&gt; /etc/sysctl.conf
    echo &quot;net.ipv4.tcp_syncookies=1&quot; &gt;&gt; /etc/sysctl.conf
    echo &quot;net.ipv4.icmp_echo_ignore_broadcasts=1&quot; &gt;&gt; /etc/sysctl.conf
    echo &quot;net.ipv4.icmp_ignore_bogus_error_responses=1&quot; &gt;&gt; /etc/sysctl.conf

    for each in `ls /proc/sys/net/ipv4/conf/`; do
        echo &quot;net.ipv4.conf.${each}.accept_source_route=0&quot; &gt;&gt; /etc/sysctl.conf
        echo &quot;net.ipv4.conf.${each}.accept_redirects=0&quot; &gt;&gt; /etc/sysctl.conf
        echo &quot;net.ipv4.conf.${each}.send_redirects=0&quot; &gt;&gt; /etc/sysctl.conf
        echo &quot;net.ipv4.conf.${each}.rp_filter=0&quot; &gt;&gt; /etc/sysctl.conf
    done
    sysctl -p

    cat &gt; /etc/firewalld/services/xl2tpd.xml&lt;&lt;EOF
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;service&gt;
  &lt;short&gt;xl2tpd&lt;/short&gt;
  &lt;description&gt;L2TP IPSec&lt;/description&gt;
  &lt;port protocol=&quot;udp&quot; port=&quot;4500&quot;/&gt;
  &lt;port protocol=&quot;udp&quot; port=&quot;1701&quot;/&gt;
&lt;/service&gt;
EOF
    chmod 640 /etc/firewalld/services/xl2tpd.xml

    systemctl enable ipsec
    systemctl enable xl2tpd
    systemctl enable firewalld

    systemctl status firewalld &gt; /dev/null 2&gt;&amp;1
    if [ $? -eq 0 ]; then
        firewall-cmd --reload
        echo &quot;Checking firewalld status...&quot;
        firewall-cmd --list-all
        echo &quot;add firewalld rules...&quot;
        firewall-cmd --permanent --add-service=ipsec
        firewall-cmd --permanent --add-service=xl2tpd
        firewall-cmd --permanent --add-masquerade
        firewall-cmd --reload
    else
        echo &quot;Firewalld looks like not running, trying to start...&quot;
        systemctl start firewalld
        if [ $? -eq 0 ]; then
            echo &quot;Firewalld start successfully...&quot;
            firewall-cmd --reload
            echo &quot;Checking firewalld status...&quot;
            firewall-cmd --list-all
            echo &quot;adding firewalld rules...&quot;
            firewall-cmd --permanent --add-service=ipsec
            firewall-cmd --permanent --add-service=xl2tpd
            firewall-cmd --permanent --add-masquerade
            firewall-cmd --reload
        else
            echo &quot;Failed to start firewalld. please enable udp port 500 4500 1701 manually if necessary.&quot;
        fi
    fi

    systemctl restart ipsec
    systemctl restart xl2tpd
    echo &quot;Checking ipsec status...&quot;
    systemctl -a | grep ipsec
    echo &quot;Checking xl2tpd status...&quot;
    systemctl -a | grep xl2tpd
    echo &quot;Checking firewalld status...&quot;
    firewall-cmd --list-all

}

finally(){

    cd ${cur_dir}
    rm -fr ${cur_dir}/l2tp
    # create l2tp command
    cp -f ${cur_dir}/`basename $0` /usr/bin/l2tp

    echo &quot;Please wait a moment...&quot;
    sleep 5
    ipsec verify
    echo
    echo &quot;###############################################################&quot;
    echo &quot;# L2TP VPN Auto Installer                                     #&quot;
    echo &quot;# System Supported: CentOS 6+ / Debian 7+ / Ubuntu 12+        #&quot;
    echo &quot;# Intro: https://teddysun.com/448.html                        #&quot;
    echo &quot;# Author: Teddysun &lt;i@teddysun.com&gt;                           #&quot;
    echo &quot;###############################################################&quot;
    echo &quot;If there is no [FAILED] above, you can connect to your L2TP &quot;
    echo &quot;VPN Server with the default Username/Password is below:&quot;
    echo
    echo &quot;Server IP: ${IP}&quot;
    echo &quot;PSK      : ${mypsk}&quot;
    echo &quot;Username : ${username}&quot;
    echo &quot;Password : ${password}&quot;
    echo
    echo &quot;If you want to modify user settings, please use below command(s):&quot;
    echo &quot;l2tp -a (Add a user)&quot;
    echo &quot;l2tp -d (Delete a user)&quot;
    echo &quot;l2tp -l (List all users)&quot;
    echo &quot;l2tp -m (Modify a user password)&quot;
    echo
    echo &quot;Welcome to visit our website: https://teddysun.com/448.html&quot;
    echo &quot;Enjoy it!&quot;
    echo
}


l2tp(){
    clear
    echo
    echo &quot;###############################################################&quot;
    echo &quot;# L2TP VPN Auto Installer                                     #&quot;
    echo &quot;# System Supported: CentOS 6+ / Debian 7+ / Ubuntu 12+        #&quot;
    echo &quot;# Intro: https://teddysun.com/448.html                        #&quot;
    echo &quot;# Author: Teddysun &lt;i@teddysun.com&gt;                           #&quot;
    echo &quot;###############################################################&quot;
    echo
    rootness
    tunavailable
    disable_selinux
    version_check
    get_os_info
    preinstall_l2tp
    install_l2tp
    finally
}

list_users(){
    if [ ! -f /etc/ppp/chap-secrets ];then
        echo &quot;Error: /etc/ppp/chap-secrets file not found.&quot;
        exit 1
    fi
    local line=&quot;+-------------------------------------------+\n&quot;
    local string=%20s
    printf &quot;${line}|${string} |${string} |\n${line}&quot; Username Password
    grep -v &quot;^#&quot; /etc/ppp/chap-secrets | awk '{printf &quot;|'${string}' |'${string}' |\n&quot;, $1,$3}'
    printf ${line}
}

add_user(){
    while :
    do
        read -p &quot;Please input your Username:&quot; user
        if [ -z ${user} ]; then
            echo &quot;Username can not be empty&quot;
        else
            grep -w &quot;${user}&quot; /etc/ppp/chap-secrets &gt; /dev/null 2&gt;&amp;1
            if [ $? -eq 0 ];then
                echo &quot;Username (${user}) already exists. Please re-enter your username.&quot;
            else
                break
            fi
        fi
    done
    pass=`rand`
    echo &quot;Please input ${user}'s password:&quot;
    read -p &quot;(Default Password: ${pass}):&quot; tmppass
    [ ! -z ${tmppass} ] &amp;&amp; pass=${tmppass}
    echo &quot;${user}    l2tpd    ${pass}       *&quot; &gt;&gt; /etc/ppp/chap-secrets
    echo &quot;Username (${user}) add completed.&quot;
}

del_user(){
    while :
    do
        read -p &quot;Please input Username you want to delete it:&quot; user
        if [ -z ${user} ]; then
            echo &quot;Username can not be empty&quot;
        else
            grep -w &quot;${user}&quot; /etc/ppp/chap-secrets &gt;/dev/null 2&gt;&amp;1
            if [ $? -eq 0 ];then
                break
            else
                echo &quot;Username (${user}) is not exists. Please re-enter your username.&quot;
            fi
        fi
    done
    sed -i &quot;/^\&lt;${user}\&gt;/d&quot; /etc/ppp/chap-secrets
    echo &quot;Username (${user}) delete completed.&quot;
}

mod_user(){
    while :
    do
        read -p &quot;Please input Username you want to change password:&quot; user
        if [ -z ${user} ]; then
            echo &quot;Username can not be empty&quot;
        else
            grep -w &quot;${user}&quot; /etc/ppp/chap-secrets &gt;/dev/null 2&gt;&amp;1
            if [ $? -eq 0 ];then
                break
            else
                echo &quot;Username (${user}) is not exists. Please re-enter your username.&quot;
            fi
        fi
    done
    pass=`rand`
    echo &quot;Please input ${user}'s new password:&quot;
    read -p &quot;(Default Password: ${pass}):&quot; tmppass
    [ ! -z ${tmppass} ] &amp;&amp; pass=${tmppass}
    sed -i &quot;/^\&lt;${user}\&gt;/d&quot; /etc/ppp/chap-secrets
    echo &quot;${user}    l2tpd    ${pass}       *&quot; &gt;&gt; /etc/ppp/chap-secrets
    echo &quot;Username ${user}'s password has been changed.&quot;
}

# Main process
action=$1
if [ -z ${action} ] &amp;&amp; [ &quot;`basename $0`&quot; != &quot;l2tp&quot; ]; then
    action=install
fi

case ${action} in
    install)
        l2tp 2&gt;&amp;1 | tee ${cur_dir}/l2tp.log
        ;;
    -l|--list)
        list_users
        ;;
    -a|--add)
        add_user
        ;;
    -d|--del)
        del_user
        ;;
    -m|--mod)
        mod_user
        ;;
    -h|--help)
        echo &quot;Usage: `basename $0` -l,--list   List all users&quot;
        echo &quot;       `basename $0` -a,--add    Add a user&quot;
        echo &quot;       `basename $0` -d,--del    Delete a user&quot;
        echo &quot;       `basename $0` -m,--mod    Modify a user password&quot;
        echo &quot;       `basename $0` -h,--help   Print this help information&quot;
        ;;
    *)
        echo &quot;Usage: `basename $0` [-l,--list|-a,--add|-d,--del|-m,--mod|-h,--help]&quot; &amp;&amp; exit
        ;;
esac
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[内核升级]]></title>
        <id>https://orochw.github.io/post/nei-he-sheng-ji/</id>
        <link href="https://orochw.github.io/post/nei-he-sheng-ji/">
        </link>
        <updated>2021-05-17T04:09:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="操作步骤">操作步骤：</h1>
<h2 id="小版本升级">小版本升级</h2>
<h3 id="1-查看当前和可升级版本">1. 查看当前和可升级版本</h3>
<pre><code>[root@server-1 ~]# yum list kernel
Installed Packages
kernel.x86_64                           3.10.0-957.el7                                      @anaconda
Available Packages
kernel.x86_64                           3.10.0-957.5.1.el7                                  updates  
</code></pre>
<h3 id="2-升级">2. 升级</h3>
<pre><code> [root@server-1 ~]# yum update kernel -y 
</code></pre>
<h3 id="3-重启并检查">3. 重启并检查</h3>
<pre><code> [root@server-1 ~]# reboot 　　

 [root@server-1 ~]# uname -r 
</code></pre>
<p>##大版本升级</p>
<h3 id="1-载入公钥">1. 载入公钥</h3>
<pre><code>[root@server-1 ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
</code></pre>
<h3 id="2-升级安装elrepo">2. 升级安装ELRepo</h3>
<pre><code>[root@server-1 ~]# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
</code></pre>
<h3 id="3-载入elrepo-kernel元数据">3. 载入elrepo-kernel元数据</h3>
<pre><code>[root@server-1 ~]# yum --disablerepo=\* --enablerepo=elrepo-kernel repolist
</code></pre>
<h3 id="4-查看可用的rpm包">4. 查看可用的rpm包</h3>
<pre><code>[root@server-1 ~]# yum --disablerepo=\* --enablerepo=elrepo-kernel list kernel*
Installed Packages
kernel.x86_64                           3.10.0-957.el7                           @anaconda    
kernel.x86_64                           3.10.0-957.5.1.el7                       @updates     
kernel-tools.x86_64                     3.10.0-957.el7                           @anaconda    
kernel-tools-libs.x86_64                3.10.0-957.el7                           @anaconda    
Available Packages
kernel-lt.x86_64                        4.4.176-1.el7.elrepo                     elrepo-kernel
kernel-lt-devel.x86_64                  4.4.176-1.el7.elrepo                     elrepo-kernel
kernel-lt-doc.noarch                    4.4.176-1.el7.elrepo                     elrepo-kernel
kernel-lt-headers.x86_64                4.4.176-1.el7.elrepo                     elrepo-kernel
kernel-lt-tools.x86_64                  4.4.176-1.el7.elrepo                     elrepo-kernel
kernel-lt-tools-libs.x86_64             4.4.176-1.el7.elrepo                     elrepo-kernel
kernel-lt-tools-libs-devel.x86_64       4.4.176-1.el7.elrepo                     elrepo-kernel
kernel-ml.x86_64                        4.20.12-1.el7.elrepo                     elrepo-kernel　// 安装目标版本
kernel-ml-devel.x86_64                  4.20.12-1.el7.elrepo                     elrepo-kernel
kernel-ml-doc.noarch                    4.20.12-1.el7.elrepo                     elrepo-kernel
kernel-ml-headers.x86_64                4.20.12-1.el7.elrepo                     elrepo-kernel
kernel-ml-tools.x86_64                  4.20.12-1.el7.elrepo                     elrepo-kernel
kernel-ml-tools-libs.x86_64             4.20.12-1.el7.elrepo                     elrepo-kernel
kernel-ml-tools-libs-devel.x86_64       4.20.12-1.el7.elrepo                     elrepo-kernel
</code></pre>
<p>| 说明：</p>
<p>lt  ：long term support，长期支持版本；</p>
<p>ml：mainline，主线版本；</p>
<h3 id="5-安装最新版本的kernel">5. 安装最新版本的kernel</h3>
<pre><code>[root@server-1 ~]# yum --disablerepo=\* --enablerepo=elrepo-kernel install  kernel-ml.x86_64  -y
</code></pre>
<h3 id="6-删除旧版本工具包">6. 删除旧版本工具包</h3>
<pre><code>[root@server-1 ~]# yum remove kernel-tools-libs.x86_64 kernel-tools.x86_64  -y
</code></pre>
<h3 id="7-安装新版本工具包">7. 安装新版本工具包</h3>
<pre><code>[root@server-1 ~]# yum --disablerepo=\* --enablerepo=elrepo-kernel install kernel-ml-tools.x86_64  -y
</code></pre>
<h3 id="8-查看内核插入顺序">8. 查看内核插入顺序</h3>
<pre><code>[root@server-1 ~]# awk -F \' '$1==&quot;menuentry &quot; {print i++ &quot; : &quot; $2}' /etc/grub2.cfg
0 : CentOS Linux (4.20.12-1.el7.elrepo.x86_64) 7 (Core)
1 : CentOS Linux (3.10.0-957.5.1.el7.x86_64) 7 (Core)
2 : CentOS Linux (3.10.0-957.el7.x86_64) 7 (Core)
3 : CentOS Linux (0-rescue-ca0f6fb3c5f24478abc0a2e275281d7a) 7 (Core)
</code></pre>
<p>说明：默认新内核是从头插入，默认启动顺序也是从0开始（当前顺序还未生效），或者使用：</p>
<pre><code>[root@server-17 ~]# grep &quot;^menuentry&quot; /boot/grub2/grub.cfg | cut -d &quot;'&quot; -f2
CentOS Linux (4.20.12-1.el7.elrepo.x86_64) 7 (Core)
CentOS Linux (3.10.0-957.5.1.el7.x86_64) 7 (Core)
CentOS Linux (3.10.0-957.el7.x86_64) 7 (Core)
CentOS Linux (0-rescue-ca0f6fb3c5f24478abc0a2e275281d7a) 7 (Core)
</code></pre>
<p>其中文件 /etc/grub2.cfg 和 /boot/grub2/grub.cfg 内容一致。</p>
<h3 id="9-查看当前实际启动顺序">9. 查看当前实际启动顺序</h3>
<pre><code>[root@server-1 ~]# grub2-editenv list
saved_entry=CentOS Linux (3.10.0-957.5.1.el7.x86_64) 7 (Core)
</code></pre>
<h3 id="10-设置默认启动">10. 设置默认启动</h3>
<pre><code>[root@server-1 ~]# grub2-set-default 'CentOS Linux (4.20.12-1.el7.elrepo.x86_64) 7 (Core)'
[root@server-1 ~]# grub2-editenv list
saved_entry=CentOS Linux (4.20.12-1.el7.elrepo.x86_64) 7 (Core)
</code></pre>
<p>或者</p>
<pre><code>[root@server-1 ~]# vim /etc/default/grub
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR=&quot;$(sed 's, release .*$,,g' /etc/system-release)&quot;
GRUB_DEFAULT=0
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT=&quot;console&quot;
GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rd.lvm.lv=centos_master/root rd.lvm.lv=centos_master/swap rhgb quiet&quot;
GRUB_DISABLE_RECOVERY=&quot;true&quot;
</code></pre>
<h3 id="11-接下来运行下面的命令来重新创建内核配置">11. 接下来运行下面的命令来重新创建内核配置。</h3>
<pre><code>[root@node01 ~]# grub2-mkconfig -o /boot/grub2/grub.cfg
Generating grub configuration file ...
Found linux image: /boot/vmlinuz-5.12.0-1.el7.elrepo.x86_64
Found initrd image: /boot/initramfs-5.12.0-1.el7.elrepo.x86_64.img
Found linux image: /boot/vmlinuz-3.10.0-1160.el7.x86_64
Found initrd image: /boot/initramfs-3.10.0-1160.el7.x86_64.img
Found linux image: /boot/vmlinuz-0-rescue-7764c99a180d40029f34fa33f565be8e
Found initrd image: /boot/initramfs-0-rescue-7764c99a180d40029f34fa33f565be8e.img
done
</code></pre>
<h3 id="12-重启并检查">12.  重启并检查</h3>
<pre><code> [root@server-1 ~]# reboot 

 [root@server-1 ~]# uname -r 
</code></pre>
<h3 id="13-一键最新脚本">13. 一键最新脚本</h3>
<pre><code>rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
yum --disablerepo=\* --enablerepo=elrepo-kernel repolist
yum --disablerepo=\* --enablerepo=elrepo-kernel install  kernel-ml.x86_64  -y
yum remove kernel-tools-libs.x86_64 kernel-tools.x86_64  -y
yum --disablerepo=\* --enablerepo=elrepo-kernel install kernel-ml-tools.x86_64  -y
sed -i s/GRUB_DEFAULT=saved/GRUB_DEFAULT=0/g /etc/default/grub
grub2-mkconfig -o /boot/grub2/grub.cfg
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[redis一键安装脚本]]></title>
        <id>https://orochw.github.io/post/redis-yi-jian-an-zhuang-jiao-ben/</id>
        <link href="https://orochw.github.io/post/redis-yi-jian-an-zhuang-jiao-ben/">
        </link>
        <updated>2021-05-16T05:43:33.000Z</updated>
        <content type="html"><![CDATA[<h2 id="安装redis">安装redis</h2>
<pre><code>cd /opt
useradd redis
mkdir -pv /data/apps/redis/{conf,logs,data}

wget http://download.redis.io/releases/redis-5.0.0.tar.gz
tar -xf redis-5.0.0.tar.gz
cd redis-5.0.0


make install PREFIX=/data/apps/redis

cp redis.conf /data/apps/redis/conf/
chown -R redis.redis /data/apps/redis

cd /data/apps/redis
sed -i 's/appendonly no/appendonly yes/' conf/redis.conf
sed -i '/^dir/d' conf/redis.conf
echo &quot;dir /data/apps/redis/data&quot; &gt;&gt; conf/redis.conf
echo &quot;requirepass `&lt; /dev/urandom tr -cd _A-Z-a-z-0-9@#^ | head -c ${1:-20}; echo`&quot;  &gt;&gt; conf/redis.conf
sed -i 's#logfile &quot;&quot;#logfile &quot;/data/apps/redis/logs/redis.log&quot;#g' conf/redis.conf
sed -i 's/bind 127.0.0.1/bind 0.0.0.0/' conf/redis.conf
sed -i 's/protected-mode yes/protected-mode no/' conf/redis.conf



cat &lt;&lt;EOF &gt; /usr/lib/systemd/system/redis.service
[Unit]
Description=Redis Server Manager
After=syslog.target
After=network.target

[Service]
Type=simple
User=redis
Group=redis
PIDFile=/var/run/redis_6379.pid
ExecStart=/data/apps/redis/bin/redis-server /data/apps/redis/conf/redis.conf
ExecStop=/data/apps/redis/bin/redis-cli shutdown
Restart=always
#ReadWriteDirectories=/data/apps/redis/data
[Install]
WantedBy=multi-user.target
EOF
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[新开机器所需安装]]></title>
        <id>https://orochw.github.io/post/xin-kai-ji-qi-suo-xu-an-zhuang/</id>
        <link href="https://orochw.github.io/post/xin-kai-ji-qi-suo-xu-an-zhuang/">
        </link>
        <updated>2021-05-16T05:42:09.000Z</updated>
        <content type="html"><![CDATA[<pre><code>yum install -y epel-release vim wget telnet lsof unzip ntpdate  git net-tools sysstat   gcc gcc-c++  python-pip
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jdk安装脚本]]></title>
        <id>https://orochw.github.io/post/jdk-an-zhuang-jiao-ben/</id>
        <link href="https://orochw.github.io/post/jdk-an-zhuang-jiao-ben/">
        </link>
        <updated>2021-05-16T05:41:34.000Z</updated>
        <content type="html"><![CDATA[<p>####### 安装jdk</p>
<pre><code>yum install -y java-1.8.0-openjdk  java-1.8.0-openjdk-devel.x86_64
ls -lrt /usr/bin/java 
cat &lt;&lt;'EOF' &gt; /etc/profile.d/jdk.sh
export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.275.b01-0.el7_9.x86_64/
export JRE_HOME=$JAVA_HOME/jre
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH
export PATH=$JAVA_HOME/bin:$PATH
EOF
source /etc/profile
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用kubeadm安装kubernetes集群]]></title>
        <id>https://orochw.github.io/post/shi-yong-kubeadm-an-zhuang-kubernetes-ji-qun/</id>
        <link href="https://orochw.github.io/post/shi-yong-kubeadm-an-zhuang-kubernetes-ji-qun/">
        </link>
        <updated>2021-05-16T05:40:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="k8s安装">K8s安装</h1>
<p>kubeadm<br>
1、master nodes：安装kubelet kubeadm docker<br>
2、master：kubelet init<br>
3、node：kubelet join</p>
<h2 id="一-准备工作">一、准备工作</h2>
<p>关闭防火墙，iptables，关闭swap分区</p>
<pre><code>systemctl stop firewalld
swapoff -a
iptables -F

yum install -y bridge-utils.x86_64
modprobe  br_netfilter  # 加载br_netfilter模块，使用lsmod查看开启的模块
cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system  # 重新加载所有配置文件
</code></pre>
<h2 id="二-准备yum源">二、准备yum源</h2>
<h3 id="1-准备docker的yum源">1、准备docker的yum源</h3>
<pre><code>$ sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine

$ sudo yum install -y yum-utils

$ sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo                
</code></pre>
<h3 id="2-准备k8s的yum源">2、准备K8s的yum源</h3>
<pre><code>cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF
</code></pre>
<h2 id="三-安装k8s-docker-1个master-2个node">三、安装k8s docker 1个master、2个node</h2>
<p>master</p>
<pre><code>yum install docker-ce kubelet kubeadm kubectl bash-completion -y

</code></pre>
<p>node节点</p>
<pre><code>yum install docker-ce kubelet kubeadm -y
</code></pre>
<h2 id="四-主节点的初始化">四、主节点的初始化</h2>
<h3 id="1-启动docker和kubelet">1、启动docker和kubelet</h3>
<pre><code>vim /etc/sysconfig/kubelet

# KUBELET_EXTRA_ARGS=&quot;--fail-swap-on=false&quot;

# kubectl 命令补全
source /usr/share/bash-completion/bash_completion
source &lt;(kubectl completion bash)
echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc

systemctl start docker kubelet 
systemctl enable docker kubelet
kubeadm init --kubernetes-version=stable-1 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --ignore-preflight-errors=Swap
</code></pre>
<p>master初始化完成</p>
<pre><code>[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace
[kubelet-finalize] Updating &quot;/etc/kubernetes/kubelet.conf&quot; to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 192.168.19.29:6443 --token rp14ge.sd6dlzilhzik7ga5 \
    --discovery-token-ca-cert-hash sha256:d69202fa7177ceecc3fd2ef899ce18fa78530c91ec4a64fe910dc5674669ec31
</code></pre>
<h3 id="2-排错">2、排错</h3>
<pre><code>[root@master ~]# kubectl get cs
Warning: v1 ComponentStatus is deprecated in v1.19+
NAME                 STATUS      MESSAGE                                                                                       ERROR
scheduler            Unhealthy   Get &quot;http://127.0.0.1:10251/healthz&quot;: dial tcp 127.0.0.1:10251: connect: connection refused   
controller-manager   Unhealthy   Get &quot;http://127.0.0.1:10252/healthz&quot;: dial tcp 127.0.0.1:10252: connect: connection refused   
etcd-0               Healthy     {&quot;health&quot;:&quot;true&quot;}  
</code></pre>
<p>通过搜索应该是禁用端口</p>
<pre><code>vim /etc/kubernetes/manifests/kube-scheduler.yaml
#    - --port=0
vim /etc/kubernetes/manifests/kube-controller-manager.yaml
#    - --port=0
</code></pre>
<p>重启kubelet</p>
<pre><code>[root@master manifests]# systemctl restart kubelet
[root@master manifests]# kubectl get cs
Warning: v1 ComponentStatus is deprecated in v1.19+
NAME                 STATUS    MESSAGE             ERROR
controller-manager   Healthy   ok                  
scheduler            Healthy   ok                  
etcd-0               Healthy   {&quot;health&quot;:&quot;true&quot;}
</code></pre>
<h3 id="3-安装网络组件">3、 安装网络组件</h3>
<blockquote>
<p><a href="https://github.com/coreos/flannel">flannel组件主页</a></p>
</blockquote>
<blockquote>
<p>flannel For Kubernetes v1.17+</p>
</blockquote>
<pre><code>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
</code></pre>
<p>查看节点状态</p>
<pre><code>[root@master manifests]# kubectl get nodes
NAME     STATUS   ROLES                  AGE   VERSION
master   Ready    control-plane,master   20m   v1.20.2
</code></pre>
<h2 id="五-node节点加入">五、node节点加入</h2>
<h3 id="1-yum源准备">1、yum源准备</h3>
<pre><code>[master]# scp /etc/yum.repos.d/docker-ce.repo node1:/etc/etc/yum.repos.d/docker-ce.repo
[master]# scp /etc/yum.repos.d/kubernetes.repo node1:/etc/etc/yum.repos.d/kubernetes.repo
</code></pre>
<h3 id="2-安装docker和kubelet-kubeadm">2、安装docker和kubelet kubeadm</h3>
<pre><code>yum install -y docker kubelet kubeadm
</code></pre>
<h3 id="3-启动并设置开机自启">3、启动并设置开机自启</h3>
<pre><code>systemctl start docker kubelet
systemctl enable docker kubelet
</code></pre>
<h3 id="4-加入节点">4、加入节点</h3>
<pre><code>[root@234c12 ~]# kubeadm join 192.168.19.29:6443 --token rp14ge.sd6dlzilhzik7ga5 \
    --discovery-token-ca-cert-hash sha256:d69202fa7177ceecc3fd2ef899ce18fa78530c91ec4a64fe910dc5674669ec31 --ignore-preflight-errors=Swap
</code></pre>
<p>查看集群状态</p>
<pre><code>[root@master ~]# kubectl get nodes
NAME     STATUS   ROLES                  AGE     VERSION
master   Ready    control-plane,master   8m22s   v1.20.2
node1    Ready    &lt;none&gt;                 3m51s   v1.20.2
node2    Ready    &lt;none&gt;                 3m44s   v1.20.2

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则表达式及扩展正则]]></title>
        <id>https://orochw.github.io/post/zheng-ze-biao-da-shi-ji-kuo-zhan-zheng-ze/</id>
        <link href="https://orochw.github.io/post/zheng-ze-biao-da-shi-ji-kuo-zhan-zheng-ze/">
        </link>
        <updated>2021-05-16T05:38:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="grep">grep：</h2>
<blockquote>
<p>Linux上文本处理三剑客</p>
</blockquote>
<blockquote>
<p>grep：文本过滤(模式：pattern)工具;</p>
</blockquote>
<blockquote>
<blockquote>
<p>grep, egrep, fgrep</p>
</blockquote>
</blockquote>
<blockquote>
<p>sed：stream editor，文本编辑工具；</p>
</blockquote>
<blockquote>
<p>awk：Linux上的实现gawk，文本报告生成器；</p>
</blockquote>
<blockquote>
<p>grep: Global search REgular expression and Print out the line.</p>
</blockquote>
<blockquote>
<blockquote>
<p>作用：文本搜索工具，根据用户指定的“模式”对目标文本逐行进行匹配检查；打印匹配到的行；</p>
<blockquote>
<p>模式：由正则表达式字符及文本字符所编写的过滤条件；<br>
REGEXP：由一类特殊字符及文本字符所编写的模式，其中有些字符不表示字符字面意义，而表示控制或通配的功能；<br>
分两类：</p>
<blockquote>
<p>基本正则表达式：BRE<br>
扩展正则表达式：ERE</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>grep -E, egrep</p>
</blockquote>
</blockquote>
</blockquote>
<pre><code>正则表达式引擎
	grep [OPTIONS] PATTERN [FILE...]
	选项：
		--color=auto: 对匹配到的文本着色显示；
		-v: 显示不能够被pattern匹配到的行；
		-i: 忽略字符大小写；
		-o: 仅显示匹配到的字符串；
		-q: 静默模式，不输出任何信息；
		-A #：after, 后#行
		-B #: before, 前#行
		-C #：context, 前后各#行

		-E：使用ERE；
</code></pre>
<ul>
<li>
<p>基本正则表达式元字符：</p>
<ul>
<li>字符匹配:</li>
</ul>
<table>
<thead>
<tr>
<th>字符匹配</th>
<th>涵义</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>匹配任意单个字符</td>
</tr>
<tr>
<td>[]</td>
<td>匹配指定范围内的任意单个字符</td>
</tr>
<tr>
<td>[^]</td>
<td>匹配指定范围外的任意单个字符</td>
</tr>
</tbody>
</table>
<ul>
<li>字符集：</li>
</ul>
<table>
<thead>
<tr>
<th>字符集</th>
<th>对应</th>
</tr>
</thead>
<tbody>
<tr>
<td>[:digit:]</td>
<td>任何数字</td>
</tr>
<tr>
<td>[:lower:]</td>
<td>任何小写字母</td>
</tr>
<tr>
<td>[:upper:]</td>
<td>任何大写字母</td>
</tr>
<tr>
<td>[:alpha:]</td>
<td>任何字母</td>
</tr>
<tr>
<td>[:alnum:]</td>
<td>任何字母和数字</td>
</tr>
<tr>
<td>[:punct:]</td>
<td>任何标点符号</td>
</tr>
<tr>
<td>[:space:]</td>
<td>任何空白字符</td>
</tr>
</tbody>
</table>
<ul>
<li>匹配次数：用在要指定次数的字符后面，用于指定前面的字符要出现的次数；</li>
</ul>
<table>
<thead>
<tr>
<th>次数匹配</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>匹配前面的字符任意次</td>
</tr>
<tr>
<td>?</td>
<td>0或1次</td>
</tr>
<tr>
<td>+</td>
<td>1次或多次</td>
</tr>
<tr>
<td>m</td>
<td>匹配m次</td>
</tr>
<tr>
<td>m,n</td>
<td>至少m，至多n次</td>
</tr>
</tbody>
</table>
<pre><code>*：匹配前面的字符任意次；
	例如: grep &quot;x*y&quot; 
		abxy
		xay
		xxxxxxy
</code></pre>
<ul>
<li>贪婪模式</li>
</ul>
<table>
<thead>
<tr>
<th>匹配规则</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>.*</td>
<td>任意长度的任意字符</td>
</tr>
<tr>
<td>?</td>
<td>匹配其前面的字符0或1次；即前面的可有可无</td>
</tr>
<tr>
<td>+</td>
<td>匹配其前面的字符至少1次</td>
</tr>
<tr>
<td>{m}</td>
<td>匹配前面的字符m次</td>
</tr>
<tr>
<td>{m,n}</td>
<td>匹配前面的字符至少m次，至多n次</td>
</tr>
<tr>
<td>{0,n}</td>
<td>匹配前面的字符至多n次</td>
</tr>
<tr>
<td>{m,}</td>
<td>匹配前面的字符至少m次</td>
</tr>
</tbody>
</table>
<ul>
<li>位置锚定：</li>
</ul>
<table>
<thead>
<tr>
<th>匹配规则</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>^</td>
<td>行首锚定；用于模式的最左侧</td>
</tr>
<tr>
<td>$</td>
<td>行尾锚定；用于模式的最右侧</td>
</tr>
<tr>
<td>^PATTERN$</td>
<td>用于模式匹配整行</td>
</tr>
<tr>
<td>^$</td>
<td>空行</td>
</tr>
<tr>
<td><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>*$</td>
<td>空行</td>
</tr>
<tr>
<td>&lt; 或 \b</td>
<td>词首锚定；用于单词模式的左侧</td>
</tr>
<tr>
<td>&gt; 或 \b</td>
<td>词尾锚定；用于单词模式的右侧</td>
</tr>
<tr>
<td>&lt;PATTERN&gt;</td>
<td>匹配整个单词</td>
</tr>
</tbody>
</table>
<ul>
<li>分组：
<ul>
<li>()：将一个或多个字符捆绑在一起，当作一个整体进行处理；
<ul>
<li>(xy)*ab</li>
</ul>
</li>
<li>Note: 分组括号中的模式匹配到的内容会被正则表达式引擎记录于内部的变量中，这些变量的命名方式为: \1, \2, \3, ...
<ul>
<li>\1: 从左侧起，第一个左括号以及与之匹配右括号之间的模式所匹配到的字符；
<ul>
<li>(ab+(xy)*)：
<ul>
<li>\1: ab+(xy)*</li>
<li>\2: xy</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>后向引用：引用前面的分组括号中的模式所匹配字符，(而非模式本身)</p>
</blockquote>
<h2 id="egrep及扩展的正则表达式">egrep及扩展的正则表达式</h2>
<blockquote>
<p>egrep = grep -E</p>
</blockquote>
<p>语法：<code>egrep [OPTIONS] PATTERN [FILE...]</code></p>
<h3 id="扩展正则表达式的元字符">扩展正则表达式的元字符：</h3>
<table>
<thead>
<tr>
<th>字符匹配</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>匹配任意单个字符</td>
</tr>
<tr>
<td>[]</td>
<td>匹配指定范围内的任意单个字符]</td>
</tr>
<tr>
<td>[^]</td>
<td>匹配指定范围外的任意单个字符</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>次数匹配</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>匹配前面的字符任意次</td>
</tr>
<tr>
<td>?</td>
<td>0或1次</td>
</tr>
<tr>
<td>+</td>
<td>1次或多次</td>
</tr>
<tr>
<td>m</td>
<td>匹配m次</td>
</tr>
<tr>
<td>m,n</td>
<td>至少m，至多n次</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>匹配规则</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>^</td>
<td>行首锚定；用于模式的最左侧</td>
</tr>
<tr>
<td>$</td>
<td>行尾锚定；用于模式的最右侧</td>
</tr>
<tr>
<td>^PATTERN$</td>
<td>用于模式匹配整行</td>
</tr>
<tr>
<td>^$</td>
<td>空行</td>
</tr>
<tr>
<td><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>*$</td>
<td>空行</td>
</tr>
<tr>
<td>&lt; 或 \b</td>
<td>词首锚定；用于单词模式的左侧</td>
</tr>
<tr>
<td>&gt; 或 \b</td>
<td>词尾锚定；用于单词模式的右侧</td>
</tr>
<tr>
<td>&lt;PATTERN&gt;</td>
<td>匹配整个单词</td>
</tr>
</tbody>
</table>
<blockquote>
<p>或者：</p>
<blockquote>
<p>a|b</p>
<blockquote>
<p>C|cat: C或cat</p>
</blockquote>
</blockquote>
</blockquote>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>[:space:] <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>[:space:] <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[权限管理：]]></title>
        <id>https://orochw.github.io/post/quan-xian-guan-li/</id>
        <link href="https://orochw.github.io/post/quan-xian-guan-li/">
        </link>
        <updated>2021-05-16T05:38:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="文件的权限主要针对三类对象进行定义">文件的权限主要针对三类对象进行定义：</h3>
<blockquote>
<p>owner : 属主, u</p>
</blockquote>
<blockquote>
<p>group : 属组, g</p>
</blockquote>
<blockquote>
<p>other : 其他, o</p>
</blockquote>
<h3 id="每个文件针对每类访问者都定义了三种权限">每个文件针对每类访问者都定义了三种权限：</h3>
<blockquote>
<p>r : Readable</p>
</blockquote>
<blockquote>
<p>w : Writable</p>
</blockquote>
<blockquote>
<p>x : eXcutable</p>
</blockquote>
<h4 id="文件">文件：</h4>
<blockquote>
<p>r: 可使用文件查看类工具获取其内容；</p>
</blockquote>
<blockquote>
<p>w: 可修改其内容；</p>
</blockquote>
<blockquote>
<p>x: 可以把此文件提请内核启动为一个进程；</p>
</blockquote>
<h4 id="目录">目录：</h4>
<blockquote>
<p>r: 可以使用ls查看此目录中文件列表；</p>
</blockquote>
<blockquote>
<p>w: 可在此目录中创建文件，也可删除此目录中的文件；</p>
</blockquote>
<blockquote>
<p>x: 可以使用ls -l查看此目录中文件列表，可以cd进入此目录；</p>
</blockquote>
<pre><code>数字权限转换：
	--- 000 0
	--x 001 1
	-w- 010 2
	-wx 011 3
	r-- 100 4
	r-x 101 5
	rw- 110 6
	rwx 111 7
例如：
	640: rw-r-----
	rwxr-xr-x: 755
</code></pre>
<h3 id="修改文件权限chmod">修改文件权限：chmod</h3>
<blockquote></blockquote>
<pre><code>chmod [OPTION]... OCTAL-MODE FILE...
	-R: 递归修改权限
	chmod [OPTION]... MODE[,MODE]... FILE...
		MODE:
		修改一类用户的所有权限：
			u=xxx
			g=xxx
			o=xxx
			ug=xxx
			a=xxx
			u=,g=xxx
修改一类用户某位或某些位权限
	u+
	u-
chmod [OPTION]... --reference=RFILE FILE...

参考RFILE文件的权限，将FILE的修改为同RFILE；
</code></pre>
<h3 id="修改文件的属主和属组">修改文件的属主和属组：</h3>
<blockquote>
<p>仅root可用；</p>
</blockquote>
<pre><code>修改文件的属主：chown
chown [OPTION]... [OWNER][:[GROUP]] FILE...
	用法：
		OWNER
				OWNER:GROUP
				:GROUP
					Note: 命令中的冒号可用.替换；
				-R: 递归
			chown [OPTION]... --reference=RFILE FILE...
修改文件的属组：chgrp
	chgrp [OPTION]... GROUP FILE...
	chgrp [OPTION]... --reference=RFILE FILE...
	-R
</code></pre>
<h4 id="文件或目录创建时的遮罩码umask">文件或目录创建时的遮罩码：umask</h4>
<pre><code>FILE: 666-umask
	Note: 如果某类的用户的权限减得的结果中存在x权限，则将其权限+1
DIR: 777-umask	
	umask: 查看
	umask #: 设定
</code></pre>
<blockquote>
<p>命令总结：chmod, chown, chgrp, umask</p>
</blockquote>
]]></content>
    </entry>
</feed>