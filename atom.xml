<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://orochw.github.io</id>
    <title>Gridea</title>
    <updated>2021-07-08T08:35:52.046Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://orochw.github.io"/>
    <link rel="self" href="https://orochw.github.io/atom.xml"/>
    <subtitle>OrochW Blog</subtitle>
    <logo>https://orochw.github.io/images/avatar.png</logo>
    <icon>https://orochw.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[红米 AX6 刷 openwrt(虚拟机+普通路由+AX6)]]></title>
        <id>https://orochw.github.io/post/hong-mi-ax6-shua-openwrtxu-ni-ji-pu-tong-lu-you-ax6/</id>
        <link href="https://orochw.github.io/post/hong-mi-ax6-shua-openwrtxu-ni-ji-pu-tong-lu-you-ax6/">
        </link>
        <updated>2021-07-08T07:46:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="准备">准备</h2>
<p>电脑 建议笔记本<br>
旧路由<br>
<a href="http://ct.ghpym.com/dir/7369060-41263334-4739c3">ssh远程终端软件</a></p>
<h2 id="第一步降级并恢复出厂设置">第一步｜降级并恢复出厂设置</h2>
<p>下载大佬的上传的<a href="https://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/ra69/miwifi_ra69_firmware_45a77_1.0.18.bin">红米固件</a><br>
打开路由器后台选择 系统升级—手动升级—然后选择下载好的固件，等待重启。<br>
然后最好再恢复下出厂设置。</p>
<h2 id="第二步准备-openwrt-服务">第二步｜准备 openwrt 服务</h2>
<p>进入旧路由器后台关闭dhcp服务 改地址为169.254.31.100<br>
<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=4560135&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%25**3D64**">回复恩山大佬帖子获得工具</a><br>
<a href="https://jq.qq.com/?_wv=1027&amp;k=sIidd71F">加入群聊获得openwrt虚拟机镜像</a></p>
<h3 id="创建-lua-文件">创建 lua 文件</h3>
<p>打开虚拟机镜像输入命令</p>
<pre><code>ip a
</code></pre>
<p><img src="https://raw.githubusercontent.com/OrochW/picGo/master/20210708161543.png" alt="" loading="lazy"><br>
ssh 连接上 虚拟机openwrt 的路由器，密码password然后使用 nano 创建 /usr/lib/lua/luci/controller/admin/xqsystem.lua 这样一个文件。</p>
<pre><code>nano /usr/lib/lua/luci/controller/admin/xqsystem.lua
</code></pre>
<p>如果你的系统没有 nano 你可以使用 vi 或 vim</p>
<pre><code>vim /usr/lib/lua/luci/controller/admin/xqsystem.lua
</code></pre>
<p>文件内容填写下面的保存即可。</p>
<pre><code>module(&quot;luci.controller.admin.xqsystem&quot;, package.seeall)


function index()
    local page   = node(&quot;api&quot;)
    page.target  = firstchild()
    page.title   = (&quot;&quot;)
    page.order   = 100
    page.index = true
    page   = node(&quot;api&quot;,&quot;xqsystem&quot;)
    page.target  = firstchild()
    page.title   = (&quot;&quot;)
    page.order   = 100
    page.index = true
    entry({&quot;api&quot;, &quot;xqsystem&quot;, &quot;token&quot;}, call(&quot;getToken&quot;), (&quot;&quot;), 103, 0x08)
end

local LuciHttp = require(&quot;luci.http&quot;)

function getToken()
    local result = {}
    result[&quot;code&quot;] = 0
    result[&quot;token&quot;] = &quot;; nvram set ssh_en=1; nvram commit; echo -e 'admin\nadmin' | passwd root; sed -i 's/channel=.*/channel=\&quot;debug\&quot;/g' /etc/init.d/dropbear; /etc/init.d/dropbear start;&quot;
    LuciHttp.write_json(result)
end
</code></pre>
<p>输入完成后你可以 cat /usr/lib/lua/luci/controller/admin/xqsystem.lua 检查一下。</p>
<h3 id="修改-openwrt-路由器的-lan-地址并关闭-dhcp">修改 openwrt 路由器的 Lan 地址，并关闭 DHCP</h3>
<p>进入虚拟机openwrt 192.168.1.1<br>
用户root<br>
密码password<br>
改lan地址为169.254.31.1 关闭dhcp<br>
修改pc地址为169.254.31.3<br>
然后浏览器访问：http://169.254.31.1/cgi-bin/luci/api/xqsystem/token，如果得到下面的结果，则证明你设置成功。<br>
<img src="https://raw.githubusercontent.com/OrochW/picGo/master/20210708162113.png" alt="" loading="lazy"></p>
<h2 id="第三步红米-ax-6-破解-ssh">第三步｜红米 AX 6 破解 SSH</h2>
<p>将电脑的网络设置回自动获取 DHCP，然后最好将电脑用网线和 红米 AX6 连接（因为红米 ax6 解锁 Wi-Fi 可能会掉线）。</p>
<h3 id="获取后台-stok">获取后台 STOK</h3>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/OrochW/picGo/master/20210708162235.png" alt="" loading="lazy"></figure>
<h3 id="第一次请求">第一次请求</h3>
<pre><code>http://192.168.31.1/cgi-bin/luci/;stok=&lt;STOK&gt;/api/misystem/extendwifi_connect?ssid={SSID}&amp;password={Wi-Fi密码}
</code></pre>
<ul>
<li>
<p><STOK> 替换为上面的值</p>
</li>
<li>
<p>{SSID} 替换为 openwrt 路由器的 Wi-Fi 名</p>
</li>
<li>
<p>{Wi-Fi密码} 替换为 openwrt 路由器的 Wi-Fi 密码</p>
</li>
</ul>
<p>&lt;&gt; 和 {} 均需要替换</p>
<p>将替换好的值复制到浏览器请求，如果显示 code 0 则成功。<br>
<img src="https://raw.githubusercontent.com/OrochW/picGo/master/20210708162431.png" alt="" loading="lazy"></p>
<h3 id="第二次请求">第二次请求</h3>
<pre><code>http://192.168.31.1/cgi-bin/luci/;stok=&lt;STOK&gt;/api/xqsystem/oneclick_get_remote_token?username=xxx&amp;password=xxx&amp;nonce=xxx
</code></pre>
<p><STOK> 替换为小米路由器后台获得的值即可，其它均不用改变</p>
<p>将替换好的值复制到浏览器请求，如果显示 code 0 则成功<br>
<img src="https://raw.githubusercontent.com/OrochW/picGo/master/20210708162532.png" alt="" loading="lazy"></p>
<h3 id="第四步验证-ssh-并备份">第四步｜验证 SSH 并备份</h3>
<p>ssh 连接小米路由器ssh root@192.168.31.1 密码是 admin，如果能 ssh 连接上则证明上述步骤均完成。</p>
<p>链接成功后进行备份</p>
<pre><code>mkdir /tmp/syslogbackup/
dd if=/dev/mtd9 of=/tmp/syslogbackup/mtd9
</code></pre>
<p>浏览器请求该地址下载备份</p>
<pre><code>http://192.168.31.1/backup/log/mtd9
</code></pre>
<h3 id="第五步刷入-openwrt-固件">第五步｜刷入 openwrt 固件</h3>
<p>下载固件备用<br>
下载固件：https://pan.baidu.com/s/1NVDSw79g4V18JpucMsBMkw<br>
提取码：fmaw</p>
<p>ssh 连接 红米 ax 设置env<br>
ssh 连接上后复制👇下面执行</p>
<pre><code>nvram set flag_last_success=0
nvram set flag_boot_rootfs=0
nvram set flag_boot_success=1
nvram set flag_try_sys1_failed=0
nvram set flag_try_sys2_failed=0
nvram set boot_wait=on
nvram set uart_en=1
nvram set telnet_en=1
nvram set ssh_en=1
nvram commit
</code></pre>
<p>scp 固件 qsdk 固件并刷入<br>
<img src="https://raw.githubusercontent.com/OrochW/picGo/master/20210708163500.png" alt="" loading="lazy"><br>
如果下载了这个xmoba就不需要ssh再搞一个winscp了。直接拖就完事了<br>
scp 下载好的 xiaomimtd12.bin 到 红米 AX6 的 /tmp 下面</p>
<pre><code>scp xiaomimtd12.bin root@192.168.31.1:/tmp
</code></pre>
<p>并在红米 AX6 上执行</p>
<pre><code>mtd write /tmp/xiaomimtd12.bin rootfs
</code></pre>
<p>断电重启红米 AX6，此时红米 AX 6 的后台地址已经变为 192.168.1.1</p>
<p>重新分区</p>
<p>scp 下载好的 a6minbib.bin 到 红米 AX6 的 /tmp 下面</p>
<pre><code>scp a6minbib.bin root@192.168.1.1:/tmp
</code></pre>
<p>并在 红米AX6 上执行</p>
<pre><code>. /lib/upgrade/platform.sh
switch_layout boot; do_flash_failsafe_partition a6minbib &quot;0:MIBIB&quot;
</code></pre>
<p>拔电源重启路由器</p>
<p>openwrt刷入到rootfs_1分区<br>
scp 下载好的 openwrt-ipq807x-generic-xiaomi_ax6-squashfs-nand-factory.bin 到 红米 AX6 的 /tmp</p>
<pre><code>scp openwrt-ipq807x-generic-xiaomi_ax6-squashfs-nand-factory.bin root@192.168.1.1:/tmp
</code></pre>
<p>在红米 AX6 上执行刷入</p>
<pre><code>ubiformat /dev/mtd13 -y -f /tmp/openwrt-ipq807x-generic-xiaomi_ax6-squashfs-nand-factory.bin
fw_setenv flag_last_success 1
fw_setenv flag_boot_rootfs 1
</code></pre>
<p>红米 AX6 执行命令重启</p>
<pre><code>reboot
</code></pre>
<p>重启后完成，系统应该已经是 openwrt 系统了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一个pipeline 4个功能]]></title>
        <id>https://orochw.github.io/post/yi-ge-pipeline-4-ge-gong-neng/</id>
        <link href="https://orochw.github.io/post/yi-ge-pipeline-4-ge-gong-neng/">
        </link>
        <updated>2021-05-25T08:12:45.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/OrochW/picGo/master/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="" loading="lazy"></figure>
<blockquote>
<p>突发奇想让开发在测试环境实现服务的四个状态<br>
一个pipeline的四个功能块<br>
前提了解pipeline的语法</p>
</blockquote>
<p><a href="https://www.jianshu.com/p/f1167e8850cd">jenkins pipeline基础语法与示例</a></p>
<pre><code>pipeline {
    agent any
    environment {
	   //项目名称
       PROJECT_NAME=&quot;imin&quot;
	   //相对编译目录的jar包路径 
	   JAR_PATH = &quot;target/${PROJECT_NAME}.jar&quot;
	   //目标主机 jar包目录路径
	   DEST_HOST_JAR_DIR = &quot;/home/java/${PROJECT_NAME}/&quot;
	   //目标主机ip 或者 主机名
	   DEST_HOST=&quot;im&quot;
	   //jar包使用的配置
	   ACTIVE_NAME = &quot;t&quot;
	   //ssh到目标主机的用户名
	   SSH_USER = &quot;centos&quot;
	   //ssh到目标主机的端口
	   SSH_PORT = &quot;6&quot;
	   //jar包启动监听的端口
	   SERVER_PORT=&quot;90&quot;
    }
	stages {
		stage('拉代码'){
			when {
				environment name: 'ACT',
				value: 'update'
			}
				steps{
					git branch: &quot;${BRANCH}&quot;, credentialsId: 'xxxxxxxxxxxx', url: 'http://git.xxxxxxxxxxxxxxxxxxxxxxxxx.git'
				}
		}
		
		stage('编译'){
			when {
				environment name: 'ACT',
				value: 'update'
			}
				steps{
					withMaven(maven: 'M3.6.3') {
						//mvn构建
						sh &quot;mvn clean install -Dmaven.test.skip=true &amp;&amp; ls -a&quot;
					}
				}
		}

		stage('停止当前服务'){
			when {
				anyOf{
					environment name: 'ACT',
					value: 'update';
					
					environment name: 'ACT',
					value: 'restart';
					
					environment name: 'ACT',
					value: 'stop';
					
					environment name: 'ACT',
					value: 'rollback';
				}
			}
			steps{
			
				//停止当前服务
				sh &quot;&quot;&quot;
					ssh -p ${SSH_PORT} -i /home/id_rsa  ${SSH_USER}@${DEST_HOST} -tt &lt;&lt; remotessh
					(jps -mvl |grep ${PROJECT_NAME} |cut -d ' ' -f 1 |xargs kill -9 )||echo 没找到服务可以kill
					exit
					remotessh
				&quot;&quot;&quot;
			}
		}
		
		stage('目标主机jar包回滚'){
			when {
				environment name: 'ACT',
				value: 'rollback'
			}	    
				steps{
					//回滚jar包
					sh &quot;&quot;&quot;
						ssh -p ${SSH_PORT} -i /home/id_rsa  ${SSH_USER}@${DEST_HOST} -tt &lt;&lt; remotessh
						echo 备份jar包
						cd ${DEST_HOST_JAR_DIR}
						rm -rf ${PROJECT_NAME}.jar
						mv bak_${PROJECT_NAME}.jar ${PROJECT_NAME}.jar || echo 没找到备份jar包
						exit
						remotessh
					&quot;&quot;&quot;
				}
		}
		
		
		stage('备份并发送jar包'){
			when {
				environment name: 'ACT',
				value: 'update'
			}	    
				steps{
					//备份jar包
					sh &quot;&quot;&quot;
						ssh -p ${SSH_PORT} -i /home/id_rsa  ${SSH_USER}@${DEST_HOST} -tt &lt;&lt; remotessh
						echo 备份jar包
						cd ${DEST_HOST_JAR_DIR}
						rm -rf bak_${PROJECT_NAME}.jar
						mv ${PROJECT_NAME}.jar bak_${PROJECT_NAME}.jar || echo 没找到jar包无需备份
						exit
						remotessh
					&quot;&quot;&quot;
					//传输新的jar包
					sh &quot;cd ${PROJECT_NAME} &amp;&amp; scp -P${SSH_PORT} -i /home/id_rsa  ${JAR_PATH}  ${SSH_USER}@${DEST_HOST}:${DEST_HOST_JAR_DIR}&quot;
				}
		}

		stage('启动服务'){
			when {
				anyOf{
					environment name: 'ACT',
					value: 'update';
					
					environment name: 'ACT',
					value: 'restart';
					
					environment name: 'ACT',
					value: 'rollback';
				}
			}
			steps{
				//执行部署脚本
				sh &quot;&quot;&quot;
					ssh -p ${SSH_PORT} -i /home/id_rsa  ${SSH_USER}@${DEST_HOST} -tt &lt;&lt; remotessh
					echo 执行脚本
					cd ${DEST_HOST_JAR_DIR}
					pwd
					ls -l
					sleep 10
					nohup java  \
						-jar ./${PROJECT_NAME}.jar \
						-Xms512 -Xmx512 -Xmn256 \
						--server.port=${SERVER_PORT} \
						--spring.profiles.active=${ACTIVE_NAME} \
						&gt; output.log 2&gt;&amp;1 &amp;
					exit
					remotessh
				&quot;&quot;&quot;
			}
		}
	}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jenkins war包起服务]]></title>
        <id>https://orochw.github.io/post/jenkins-war-bao-qi-fu-wu/</id>
        <link href="https://orochw.github.io/post/jenkins-war-bao-qi-fu-wu/">
        </link>
        <updated>2021-05-17T07:55:51.000Z</updated>
        <content type="html"><![CDATA[<p>需要JDK</p>
<pre><code>/opt/jdk1.8.0_201/bin/java  -jar /data/jenkins.war &gt;/tmp/jenkins.out 2&gt;&amp;1
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[nginx一键编译脚本]]></title>
        <id>https://orochw.github.io/post/nginx-yi-jian-bian-yi-jiao-ben/</id>
        <link href="https://orochw.github.io/post/nginx-yi-jian-bian-yi-jiao-ben/">
        </link>
        <updated>2021-05-17T07:24:50.000Z</updated>
        <content type="html"><![CDATA[<pre><code>############  安装nginx
yum install -y  pcre pcre-devel zlib zlib-devel openssl openssl-devel autoconf automake make gcc-c++
useradd -s /sbin/nologin nginx
cd /usr/local/src
wget http://nginx.org/download/nginx-1.16.0.tar.gz
tar -xf nginx-1.18.0.tar.gz
cd nginx-1.16.0
./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_realip_module --with-http_stub_status_module --with-http_gzip_static_module --with-http_ssl_module  --with-http_flv_module --with-stream --with-threads --with-stream_realip_module --with-stream_ssl_module --with-file-aio
make &amp;&amp; make install




------- 配置环境变量 ----------
cat &lt;&lt;'EOF' &gt; /etc/profile.d/nginx.sh
export NGINX_HOME=/usr/local/nginx
export PATH=$NGINX_HOME/sbin:$PATH
EOF
source /etc/profile

-------- 配置成系统服务 ------------
cat &lt;&lt;EOF &gt; /usr/lib/systemd/system/nginx.service
[Unit]
Description=nginx - high performance web server
Documentation=http://nginx.org/en/docs/
After=network.target remote-fs.target nss-lookup.target


[Service]
Type=forking
ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf
ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
ExecReload=/usr/local/nginx/sbin/nginx -s reload
ExecStop=/usr/local//nginx/sbin/nginx -s quit
PrivateTmp=true

[Install]
WantedBy=multi-user.target

EOF
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PPTP一键脚本]]></title>
        <id>https://orochw.github.io/post/pptp-yi-jian-jiao-ben/</id>
        <link href="https://orochw.github.io/post/pptp-yi-jian-jiao-ben/">
        </link>
        <updated>2021-05-17T06:18:42.000Z</updated>
        <content type="html"><![CDATA[<pre><code>#在X-shell中先安装lrzsz yum -y install lrzsz
#!/bin/bash
#
# Author:  yeho &lt;lj2007331 AT gmail.com&gt;
# Blog:  https://blog.linuxeye.com
#
# Installs a PPTP VPN-only system for CentOS

# Check if user is root
[ $(id -u) != &quot;0&quot; ] &amp;&amp; { echo -e &quot;\033[31mError: You must be root to run this script\033[0m&quot;; exit 1; } 

export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
clear
printf &quot;
#######################################################################
#    LNMP/LAMP/LANMP for CentOS/RedHat 5+ Debian 6+ and Ubuntu 12+    #
#            Installs a PPTP VPN-only system for CentOS               #
# For more information please visit https://blog.linuxeye.com/31.html #
#######################################################################
&quot;

[ ! -e '/usr/bin/curl' ] &amp;&amp; yum -y install curl

VPN_IP=`curl ipv4.icanhazip.com`

VPN_USER=&quot;linuxeye&quot;
VPN_PASS=&quot;linuxeye&quot;

VPN_LOCAL=&quot;192.168.100.1&quot;
VPN_REMOTE=&quot;192.168.100.50-250&quot;

while :; do echo
    read -p &quot;Please input username: &quot; VPN_USER 
    [ -n &quot;$VPN_USER&quot; ] &amp;&amp; break
done

while :; do echo
    read -p &quot;Please input password: &quot; VPN_PASS
    [ -n &quot;$VPN_PASS&quot; ] &amp;&amp; break
done
clear


if [ -f /etc/redhat-release -a -n &quot;`grep ' 7\.' /etc/redhat-release`&quot; ];then
    #CentOS_REL=7
    if [ ! -e /etc/yum.repos.d/epel.repo ];then
        cat &gt; /etc/yum.repos.d/epel.repo &lt;&lt; EOF
[epel]
name=Extra Packages for Enterprise Linux 7 - \$basearch
#baseurl=http://download.fedoraproject.org/pub/epel/7/\$basearch
mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;arch=\$basearch
failovermethod=priority
enabled=1
gpgcheck=0
EOF
    fi
    for Package in wget make openssl gcc-c++ ppp pptpd iptables iptables-services 
    do
        yum -y install $Package
    done
    echo 'net.ipv4.ip_forward = 1' &gt;&gt; /etc/sysctl.conf
elif [ -f /etc/redhat-release -a -n &quot;`grep ' 6\.' /etc/redhat-release`&quot; ];then
    #CentOS_REL=6
    for Package in wget make openssl gcc-c++ iptables ppp 
    do
        yum -y install $Package
    done
    sed -i 's@net.ipv4.ip_forward.*@net.ipv4.ip_forward = 1@g' /etc/sysctl.conf
    rpm -Uvh http://poptop.sourceforge.net/yum/stable/rhel6/pptp-release-current.noarch.rpm
    yum -y install pptpd
else
    echo -e &quot;\033[31mDoes not support this OS, Please contact the author! \033[0m&quot;
    exit 1
fi

echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward

sysctl -p /etc/sysctl.conf

[ -z &quot;`grep '^localip' /etc/pptpd.conf`&quot; ] &amp;&amp; echo &quot;localip $VPN_LOCAL&quot; &gt;&gt; /etc/pptpd.conf # Local IP address of your VPN server
[ -z &quot;`grep '^remoteip' /etc/pptpd.conf`&quot; ] &amp;&amp; echo &quot;remoteip $VPN_REMOTE&quot; &gt;&gt; /etc/pptpd.conf # Scope for your home network
[ -z &quot;`grep '^stimeout' /etc/pptpd.conf`&quot; ] &amp;&amp; echo &quot;stimeout 172800&quot; &gt;&gt; /etc/pptpd.conf

if [ -z &quot;`grep '^ms-dns' /etc/ppp/options.pptpd`&quot; ];then
     cat &gt;&gt; /etc/ppp/options.pptpd &lt;&lt; EOF
ms-dns 1.1.1.1
#ms-dns 1.0.0.1
ms-dns 8.8.8.8 # Google DNS Primary
#ms-dns 8.8.4.4
ms-dns 114.114.114.114
#ms-dns 119.29.29.29

EOF
fi

echo &quot;$VPN_USER pptpd $VPN_PASS *&quot; &gt;&gt; /etc/ppp/chap-secrets

ETH=`route | grep default | awk '{print $NF}'`
[ -z &quot;`grep '1723 -j ACCEPT' /etc/sysconfig/iptables`&quot; ] &amp;&amp; iptables -I INPUT 4 -p tcp -m state --state NEW -m tcp --dport 1723 -j ACCEPT
[ -z &quot;`grep 'gre -j ACCEPT' /etc/sysconfig/iptables`&quot; ] &amp;&amp; iptables -I INPUT 5 -p gre -j ACCEPT 
iptables -t nat -A POSTROUTING -o $ETH -j MASQUERADE
iptables -I FORWARD -p tcp --syn -i ppp+ -j TCPMSS --set-mss 1356
service iptables save
sed -i 's@^-A INPUT -j REJECT --reject-with icmp-host-prohibited@#-A INPUT -j REJECT --reject-with icmp-host-prohibited@' /etc/sysconfig/iptables 
sed -i 's@^-A FORWARD -j REJECT --reject-with icmp-host-prohibited@#-A FORWARD -j REJECT --reject-with icmp-host-prohibited@' /etc/sysconfig/iptables 
service iptables restart
chkconfig iptables on

service pptpd restart
chkconfig pptpd on
clear

echo -e &quot;You can now connect to your VPN via your external IP \033[32m${VPN_IP}\033[0m&quot;

echo -e &quot;Username: \033[32m${VPN_USER}\033[0m&quot;
echo -e &quot;Password: \033[32m${VPN_PASS}\033[0m&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[l2tp一键脚本]]></title>
        <id>https://orochw.github.io/post/l2tp-yi-jian-jiao-ben/</id>
        <link href="https://orochw.github.io/post/l2tp-yi-jian-jiao-ben/">
        </link>
        <updated>2021-05-17T06:17:02.000Z</updated>
        <content type="html"><![CDATA[<pre><code>#!/usr/bin/env bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
#=======================================================================#
#   System Supported:  CentOS 6+ / Debian 7+ / Ubuntu 12+               #
#   Description: L2TP VPN Auto Installer                                #
#=======================================================================#
cur_dir=`pwd`

libreswan_filename=&quot;libreswan-3.27&quot;
download_root_url=&quot;https://dl.lamp.sh/files&quot;

rootness(){
    if [[ $EUID -ne 0 ]]; then
       echo &quot;Error:This script must be run as root!&quot; 1&gt;&amp;2
       exit 1
    fi
}

tunavailable(){
    if [[ ! -e /dev/net/tun ]]; then
        echo &quot;Error:TUN/TAP is not available!&quot; 1&gt;&amp;2
        exit 1
    fi
}

disable_selinux(){
if [ -s /etc/selinux/config ] &amp;&amp; grep 'SELINUX=enforcing' /etc/selinux/config; then
    sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
    setenforce 0
fi
}

get_opsy(){
    [ -f /etc/redhat-release ] &amp;&amp; awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release &amp;&amp; return
    [ -f /etc/os-release ] &amp;&amp; awk -F'[= &quot;]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release &amp;&amp; return
    [ -f /etc/lsb-release ] &amp;&amp; awk -F'[=&quot;]+' '/DESCRIPTION/{print $2}' /etc/lsb-release &amp;&amp; return
}

get_os_info(){
    IP=$( ip addr | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | egrep -v &quot;^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\.&quot; | head -n 1 )
    [ -z ${IP} ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )

    local cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//' )
    local cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
    local freq=$( awk -F: '/cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//' )
    local tram=$( free -m | awk '/Mem/ {print $2}' )
    local swap=$( free -m | awk '/Swap/ {print $2}' )
    local up=$( awk '{a=$1/86400;b=($1%86400)/3600;c=($1%3600)/60;d=$1%60} {printf(&quot;%ddays, %d:%d:%d\n&quot;,a,b,c,d)}' /proc/uptime )
    local load=$( w | head -1 | awk -F'load average:' '{print $2}' | sed 's/^[ \t]*//;s/[ \t]*$//' )
    local opsy=$( get_opsy )
    local arch=$( uname -m )
    local lbit=$( getconf LONG_BIT )
    local host=$( hostname )
    local kern=$( uname -r )

    echo &quot;########## System Information ##########&quot;
    echo 
    echo &quot;CPU model            : ${cname}&quot;
    echo &quot;Number of cores      : ${cores}&quot;
    echo &quot;CPU frequency        : ${freq} MHz&quot;
    echo &quot;Total amount of ram  : ${tram} MB&quot;
    echo &quot;Total amount of swap : ${swap} MB&quot;
    echo &quot;System uptime        : ${up}&quot;
    echo &quot;Load average         : ${load}&quot;
    echo &quot;OS                   : ${opsy}&quot;
    echo &quot;Arch                 : ${arch} (${lbit} Bit)&quot;
    echo &quot;Kernel               : ${kern}&quot;
    echo &quot;Hostname             : ${host}&quot;
    echo &quot;IPv4 address         : ${IP}&quot;
    echo 
    echo &quot;########################################&quot;
}

check_sys(){
    local checkType=$1
    local value=$2

    local release=''
    local systemPackage=''

    if [[ -f /etc/redhat-release ]]; then
        release=&quot;centos&quot;
        systemPackage=&quot;yum&quot;
    elif cat /etc/issue | grep -Eqi &quot;debian&quot;; then
        release=&quot;debian&quot;
        systemPackage=&quot;apt&quot;
    elif cat /etc/issue | grep -Eqi &quot;ubuntu&quot;; then
        release=&quot;ubuntu&quot;
        systemPackage=&quot;apt&quot;
    elif cat /etc/issue | grep -Eqi &quot;centos|red hat|redhat&quot;; then
        release=&quot;centos&quot;
        systemPackage=&quot;yum&quot;
    elif cat /proc/version | grep -Eqi &quot;debian&quot;; then
        release=&quot;debian&quot;
        systemPackage=&quot;apt&quot;
    elif cat /proc/version | grep -Eqi &quot;ubuntu&quot;; then
        release=&quot;ubuntu&quot;
        systemPackage=&quot;apt&quot;
    elif cat /proc/version | grep -Eqi &quot;centos|red hat|redhat&quot;; then
        release=&quot;centos&quot;
        systemPackage=&quot;yum&quot;
    fi

    if [[ ${checkType} == &quot;sysRelease&quot; ]]; then
        if [ &quot;$value&quot; == &quot;$release&quot; ];then
            return 0
        else
            return 1
        fi
    elif [[ ${checkType} == &quot;packageManager&quot; ]]; then
        if [ &quot;$value&quot; == &quot;$systemPackage&quot; ];then
            return 0
        else
            return 1
        fi
    fi
}

rand(){
    index=0
    str=&quot;&quot;
    for i in {a..z}; do arr[index]=${i}; index=`expr ${index} + 1`; done
    for i in {A..Z}; do arr[index]=${i}; index=`expr ${index} + 1`; done
    for i in {0..9}; do arr[index]=${i}; index=`expr ${index} + 1`; done
    for i in {1..10}; do str=&quot;$str${arr[$RANDOM%$index]}&quot;; done
    echo ${str}
}

is_64bit(){
    if [ `getconf WORD_BIT` = '32' ] &amp;&amp; [ `getconf LONG_BIT` = '64' ] ; then
        return 0
    else
        return 1
    fi
}

download_file(){
    if [ -s ${1} ]; then
        echo &quot;$1 [found]&quot;
    else
        echo &quot;$1 not found!!!download now...&quot;
        if ! wget -c -t3 -T60 ${download_root_url}/${1}; then
            echo &quot;Failed to download $1, please download it to ${cur_dir} directory manually and try again.&quot;
            exit 1
        fi
    fi
}

versionget(){
    if [[ -s /etc/redhat-release ]];then
        grep -oE  &quot;[0-9.]+&quot; /etc/redhat-release
    else
        grep -oE  &quot;[0-9.]+&quot; /etc/issue
    fi
}

centosversion(){
    if check_sys sysRelease centos;then
        local code=${1}
        local version=&quot;`versionget`&quot;
        local main_ver=${version%%.*}
        if [ &quot;${main_ver}&quot; == &quot;${code}&quot; ];then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

debianversion(){
    if check_sys sysRelease debian;then
        local version=$( get_opsy )
        local code=${1}
        local main_ver=$( echo ${version} | sed 's/[^0-9]//g')
        if [ &quot;${main_ver}&quot; == &quot;${code}&quot; ];then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

version_check(){
    if check_sys packageManager yum; then
        if centosversion 5; then
            echo &quot;Error: CentOS 5 is not supported, Please re-install OS and try again.&quot;
            exit 1
        fi
    fi
}

get_char(){
    SAVEDSTTY=`stty -g`
    stty -echo
    stty cbreak
    dd if=/dev/tty bs=1 count=1 2&gt; /dev/null
    stty -raw
    stty echo
    stty $SAVEDSTTY
}

preinstall_l2tp(){

    echo
    if [ -d &quot;/proc/vz&quot; ]; then
        echo -e &quot;\033[41;37m WARNING: \033[0m Your VPS is based on OpenVZ, and IPSec might not be supported by the kernel.&quot;
        echo &quot;Continue installation? (y/n)&quot;
        read -p &quot;(Default: n)&quot; agree
        [ -z ${agree} ] &amp;&amp; agree=&quot;n&quot;
        if [ &quot;${agree}&quot; == &quot;n&quot; ]; then
            echo
            echo &quot;L2TP installation cancelled.&quot;
            echo
            exit 0
        fi
    fi
    echo
    echo &quot;Please enter IP-Range:&quot;
    read -p &quot;(Default Range: 192.168.18):&quot; iprange
    [ -z ${iprange} ] &amp;&amp; iprange=&quot;192.168.18&quot;

    echo &quot;Please enter PSK:&quot;
    read -p &quot;(Default PSK: teddysun.com):&quot; mypsk
    [ -z ${mypsk} ] &amp;&amp; mypsk=&quot;teddysun.com&quot;

    echo &quot;Please enter Username:&quot;
    read -p &quot;(Default Username: teddysun):&quot; username
    [ -z ${username} ] &amp;&amp; username=&quot;teddysun&quot;

    password=`rand`
    echo &quot;Please enter ${username}'s password:&quot;
    read -p &quot;(Default Password: ${password}):&quot; tmppassword
    [ ! -z ${tmppassword} ] &amp;&amp; password=${tmppassword}

    echo
    echo &quot;ServerIP:${IP}&quot;
    echo &quot;Server Local IP:${iprange}.1&quot;
    echo &quot;Client Remote IP Range:${iprange}.2-${iprange}.254&quot;
    echo &quot;PSK:${mypsk}&quot;
    echo
    echo &quot;Press any key to start... or press Ctrl + C to cancel.&quot;
    char=`get_char`

}

install_l2tp(){

    mknod /dev/random c 1 9

    if check_sys packageManager apt; then
        apt-get -y update

        if debianversion 7; then
            if is_64bit; then
                local libnspr4_filename1=&quot;libnspr4_4.10.7-1_amd64.deb&quot;
                local libnspr4_filename2=&quot;libnspr4-0d_4.10.7-1_amd64.deb&quot;
                local libnspr4_filename3=&quot;libnspr4-dev_4.10.7-1_amd64.deb&quot;
                local libnspr4_filename4=&quot;libnspr4-dbg_4.10.7-1_amd64.deb&quot;
                local libnss3_filename1=&quot;libnss3_3.17.2-1.1_amd64.deb&quot;
                local libnss3_filename2=&quot;libnss3-1d_3.17.2-1.1_amd64.deb&quot;
                local libnss3_filename3=&quot;libnss3-tools_3.17.2-1.1_amd64.deb&quot;
                local libnss3_filename4=&quot;libnss3-dev_3.17.2-1.1_amd64.deb&quot;
                local libnss3_filename5=&quot;libnss3-dbg_3.17.2-1.1_amd64.deb&quot;
            else
                local libnspr4_filename1=&quot;libnspr4_4.10.7-1_i386.deb&quot;
                local libnspr4_filename2=&quot;libnspr4-0d_4.10.7-1_i386.deb&quot;
                local libnspr4_filename3=&quot;libnspr4-dev_4.10.7-1_i386.deb&quot;
                local libnspr4_filename4=&quot;libnspr4-dbg_4.10.7-1_i386.deb&quot;
                local libnss3_filename1=&quot;libnss3_3.17.2-1.1_i386.deb&quot;
                local libnss3_filename2=&quot;libnss3-1d_3.17.2-1.1_i386.deb&quot;
                local libnss3_filename3=&quot;libnss3-tools_3.17.2-1.1_i386.deb&quot;
                local libnss3_filename4=&quot;libnss3-dev_3.17.2-1.1_i386.deb&quot;
                local libnss3_filename5=&quot;libnss3-dbg_3.17.2-1.1_i386.deb&quot;
            fi
            rm -rf ${cur_dir}/l2tp
            mkdir -p ${cur_dir}/l2tp
            cd ${cur_dir}/l2tp
            download_file &quot;${libnspr4_filename1}&quot;
            download_file &quot;${libnspr4_filename2}&quot;
            download_file &quot;${libnspr4_filename3}&quot;
            download_file &quot;${libnspr4_filename4}&quot;
            download_file &quot;${libnss3_filename1}&quot;
            download_file &quot;${libnss3_filename2}&quot;
            download_file &quot;${libnss3_filename3}&quot;
            download_file &quot;${libnss3_filename4}&quot;
            download_file &quot;${libnss3_filename5}&quot;
            dpkg -i ${libnspr4_filename1} ${libnspr4_filename2} ${libnspr4_filename3} ${libnspr4_filename4}
            dpkg -i ${libnss3_filename1} ${libnss3_filename2} ${libnss3_filename3} ${libnss3_filename4} ${libnss3_filename5}

            apt-get -y install wget gcc ppp flex bison make pkg-config libpam0g-dev libcap-ng-dev iptables \
                               libcap-ng-utils libunbound-dev libevent-dev libcurl4-nss-dev libsystemd-daemon-dev
        else
            apt-get -y install wget gcc ppp flex bison make python libnss3-dev libnss3-tools libselinux-dev iptables \
                               libnspr4-dev pkg-config libpam0g-dev libcap-ng-dev libcap-ng-utils libunbound-dev \
                               libevent-dev libcurl4-nss-dev libsystemd-dev
        fi
        apt-get -y --no-install-recommends install xmlto
        apt-get -y install xl2tpd

        compile_install
    elif check_sys packageManager yum; then
        echo &quot;Adding the EPEL repository...&quot;
        yum -y install epel-release yum-utils
        [ ! -f /etc/yum.repos.d/epel.repo ] &amp;&amp; echo &quot;Install EPEL repository failed, please check it.&quot; &amp;&amp; exit 1
        yum-config-manager --enable epel
        echo &quot;Adding the EPEL repository complete...&quot;

        if centosversion 7; then
            yum -y install ppp libreswan xl2tpd firewalld
            yum_install
        elif centosversion 6; then
            yum -y remove libevent-devel
            yum -y install libevent2-devel
            yum -y install nss-devel nspr-devel pkgconfig pam-devel \
                           libcap-ng-devel libselinux-devel lsof \
                           curl-devel flex bison gcc ppp make iptables gmp-devel \
                           fipscheck-devel unbound-devel xmlto libpcap-devel xl2tpd

            compile_install
        fi
    fi

}

config_install(){

    cat &gt; /etc/ipsec.conf&lt;&lt;EOF
version 2.0

config setup
    protostack=netkey
    nhelpers=0
    uniqueids=no
    interfaces=%defaultroute
    virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:!${iprange}.0/24

conn l2tp-psk
    rightsubnet=vhost:%priv
    also=l2tp-psk-nonat

conn l2tp-psk-nonat
    authby=secret
    pfs=no
    auto=add
    keyingtries=3
    rekey=no
    ikelifetime=8h
    keylife=1h
    type=transport
    left=%defaultroute
    leftid=${IP}
    leftprotoport=17/1701
    right=%any
    rightprotoport=17/%any
    dpddelay=40
    dpdtimeout=130
    dpdaction=clear
    sha2-truncbug=yes
EOF

    cat &gt; /etc/ipsec.secrets&lt;&lt;EOF
%any %any : PSK &quot;${mypsk}&quot;
EOF

    cat &gt; /etc/xl2tpd/xl2tpd.conf&lt;&lt;EOF
[global]
port = 1701

[lns default]
ip range = ${iprange}.2-${iprange}.254
local ip = ${iprange}.1
require chap = yes
refuse pap = yes
require authentication = yes
name = l2tpd
ppp debug = yes
pppoptfile = /etc/ppp/options.xl2tpd
length bit = yes
EOF

    cat &gt; /etc/ppp/options.xl2tpd&lt;&lt;EOF
ipcp-accept-local
ipcp-accept-remote
require-mschap-v2
ms-dns 8.8.8.8
ms-dns 8.8.4.4
noccp
auth
hide-password
idle 1800
mtu 1410
mru 1410
nodefaultroute
debug
proxyarp
connect-delay 5000
EOF

    rm -f /etc/ppp/chap-secrets
    cat &gt; /etc/ppp/chap-secrets&lt;&lt;EOF
# Secrets for authentication using CHAP
# client    server    secret    IP addresses
${username}    l2tpd    ${password}       *
EOF

}

compile_install(){

    rm -rf ${cur_dir}/l2tp
    mkdir -p ${cur_dir}/l2tp
    cd ${cur_dir}/l2tp
    download_file &quot;${libreswan_filename}.tar.gz&quot;
    tar -zxf ${libreswan_filename}.tar.gz

    cd ${cur_dir}/l2tp/${libreswan_filename}
        cat &gt; Makefile.inc.local &lt;&lt;'EOF'
WERROR_CFLAGS =
USE_DNSSEC = false
USE_DH31 = false
USE_GLIBC_KERN_FLIP_HEADERS = true
EOF
    make programs &amp;&amp; make install

    /usr/local/sbin/ipsec --version &gt;/dev/null 2&gt;&amp;1
    if [ $? -ne 0 ]; then
        echo &quot;${libreswan_filename} install failed.&quot;
        exit 1
    fi

    config_install

    cp -pf /etc/sysctl.conf /etc/sysctl.conf.bak

    sed -i 's/net.ipv4.ip_forward = 0/net.ipv4.ip_forward = 1/g' /etc/sysctl.conf

    for each in `ls /proc/sys/net/ipv4/conf/`; do
        echo &quot;net.ipv4.conf.${each}.accept_source_route=0&quot; &gt;&gt; /etc/sysctl.conf
        echo &quot;net.ipv4.conf.${each}.accept_redirects=0&quot; &gt;&gt; /etc/sysctl.conf
        echo &quot;net.ipv4.conf.${each}.send_redirects=0&quot; &gt;&gt; /etc/sysctl.conf
        echo &quot;net.ipv4.conf.${each}.rp_filter=0&quot; &gt;&gt; /etc/sysctl.conf
    done
    sysctl -p

    if centosversion 6; then
        [ -f /etc/sysconfig/iptables ] &amp;&amp; cp -pf /etc/sysconfig/iptables /etc/sysconfig/iptables.old.`date +%Y%m%d`

        if [ &quot;`iptables -L -n | grep -c '\-\-'`&quot; == &quot;0&quot; ]; then
            cat &gt; /etc/sysconfig/iptables &lt;&lt;EOF
# Added by L2TP VPN script
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp --dport 22 -j ACCEPT
-A INPUT -p udp -m multiport --dports 500,4500,1701 -j ACCEPT
-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -s ${iprange}.0/24  -j ACCEPT
COMMIT
*nat
:PREROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING -s ${iprange}.0/24 -j SNAT --to-source ${IP}
COMMIT
EOF
        else
            iptables -I INPUT -p udp -m multiport --dports 500,4500,1701 -j ACCEPT
            iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
            iptables -I FORWARD -s ${iprange}.0/24  -j ACCEPT
            iptables -t nat -A POSTROUTING -s ${iprange}.0/24 -j SNAT --to-source ${IP}
            /etc/init.d/iptables save
        fi

        if [ ! -f /etc/ipsec.d/cert9.db ]; then
           echo &gt; /var/tmp/libreswan-nss-pwd
           certutil -N -f /var/tmp/libreswan-nss-pwd -d /etc/ipsec.d
           rm -f /var/tmp/libreswan-nss-pwd
        fi

        chkconfig --add iptables
        chkconfig iptables on
        chkconfig --add ipsec
        chkconfig ipsec on
        chkconfig --add xl2tpd
        chkconfig xl2tpd on

        /etc/init.d/iptables restart
        /etc/init.d/ipsec start
        /etc/init.d/xl2tpd start

    else
        [ -f /etc/iptables.rules ] &amp;&amp; cp -pf /etc/iptables.rules /etc/iptables.rules.old.`date +%Y%m%d`

        if [ &quot;`iptables -L -n | grep -c '\-\-'`&quot; == &quot;0&quot; ]; then
            cat &gt; /etc/iptables.rules &lt;&lt;EOF
# Added by L2TP VPN script
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp --dport 22 -j ACCEPT
-A INPUT -p udp -m multiport --dports 500,4500,1701 -j ACCEPT
-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -s ${iprange}.0/24  -j ACCEPT
COMMIT
*nat
:PREROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING -s ${iprange}.0/24 -j SNAT --to-source ${IP}
COMMIT
EOF
        else
            iptables -I INPUT -p udp -m multiport --dports 500,4500,1701 -j ACCEPT
            iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
            iptables -I FORWARD -s ${iprange}.0/24  -j ACCEPT
            iptables -t nat -A POSTROUTING -s ${iprange}.0/24 -j SNAT --to-source ${IP}
            /sbin/iptables-save &gt; /etc/iptables.rules
        fi

        cat &gt; /etc/network/if-up.d/iptables &lt;&lt;EOF
#!/bin/sh
/sbin/iptables-restore &lt; /etc/iptables.rules
EOF
        chmod +x /etc/network/if-up.d/iptables

        if [ ! -f /etc/ipsec.d/cert9.db ]; then
           echo &gt; /var/tmp/libreswan-nss-pwd
           certutil -N -f /var/tmp/libreswan-nss-pwd -d /etc/ipsec.d
           rm -f /var/tmp/libreswan-nss-pwd
        fi

        update-rc.d -f xl2tpd defaults

        cp -f /etc/rc.local /etc/rc.local.old.`date +%Y%m%d`
        sed --follow-symlinks -i -e '/^exit 0/d' /etc/rc.local
        cat &gt;&gt; /etc/rc.local &lt;&lt;EOF

# Added by L2TP VPN script
echo 1 &gt; /proc/sys/net/ipv4/ip_forward
/usr/sbin/service ipsec start
exit 0
EOF
        chmod +x /etc/rc.local
        echo 1 &gt; /proc/sys/net/ipv4/ip_forward

        /sbin/iptables-restore &lt; /etc/iptables.rules
        /usr/sbin/service ipsec start
        /usr/sbin/service xl2tpd restart

    fi

}

yum_install(){

    config_install

    cp -pf /etc/sysctl.conf /etc/sysctl.conf.bak

    echo &quot;# Added by L2TP VPN&quot; &gt;&gt; /etc/sysctl.conf
    echo &quot;net.ipv4.ip_forward=1&quot; &gt;&gt; /etc/sysctl.conf
    echo &quot;net.ipv4.tcp_syncookies=1&quot; &gt;&gt; /etc/sysctl.conf
    echo &quot;net.ipv4.icmp_echo_ignore_broadcasts=1&quot; &gt;&gt; /etc/sysctl.conf
    echo &quot;net.ipv4.icmp_ignore_bogus_error_responses=1&quot; &gt;&gt; /etc/sysctl.conf

    for each in `ls /proc/sys/net/ipv4/conf/`; do
        echo &quot;net.ipv4.conf.${each}.accept_source_route=0&quot; &gt;&gt; /etc/sysctl.conf
        echo &quot;net.ipv4.conf.${each}.accept_redirects=0&quot; &gt;&gt; /etc/sysctl.conf
        echo &quot;net.ipv4.conf.${each}.send_redirects=0&quot; &gt;&gt; /etc/sysctl.conf
        echo &quot;net.ipv4.conf.${each}.rp_filter=0&quot; &gt;&gt; /etc/sysctl.conf
    done
    sysctl -p

    cat &gt; /etc/firewalld/services/xl2tpd.xml&lt;&lt;EOF
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;service&gt;
  &lt;short&gt;xl2tpd&lt;/short&gt;
  &lt;description&gt;L2TP IPSec&lt;/description&gt;
  &lt;port protocol=&quot;udp&quot; port=&quot;4500&quot;/&gt;
  &lt;port protocol=&quot;udp&quot; port=&quot;1701&quot;/&gt;
&lt;/service&gt;
EOF
    chmod 640 /etc/firewalld/services/xl2tpd.xml

    systemctl enable ipsec
    systemctl enable xl2tpd
    systemctl enable firewalld

    systemctl status firewalld &gt; /dev/null 2&gt;&amp;1
    if [ $? -eq 0 ]; then
        firewall-cmd --reload
        echo &quot;Checking firewalld status...&quot;
        firewall-cmd --list-all
        echo &quot;add firewalld rules...&quot;
        firewall-cmd --permanent --add-service=ipsec
        firewall-cmd --permanent --add-service=xl2tpd
        firewall-cmd --permanent --add-masquerade
        firewall-cmd --reload
    else
        echo &quot;Firewalld looks like not running, trying to start...&quot;
        systemctl start firewalld
        if [ $? -eq 0 ]; then
            echo &quot;Firewalld start successfully...&quot;
            firewall-cmd --reload
            echo &quot;Checking firewalld status...&quot;
            firewall-cmd --list-all
            echo &quot;adding firewalld rules...&quot;
            firewall-cmd --permanent --add-service=ipsec
            firewall-cmd --permanent --add-service=xl2tpd
            firewall-cmd --permanent --add-masquerade
            firewall-cmd --reload
        else
            echo &quot;Failed to start firewalld. please enable udp port 500 4500 1701 manually if necessary.&quot;
        fi
    fi

    systemctl restart ipsec
    systemctl restart xl2tpd
    echo &quot;Checking ipsec status...&quot;
    systemctl -a | grep ipsec
    echo &quot;Checking xl2tpd status...&quot;
    systemctl -a | grep xl2tpd
    echo &quot;Checking firewalld status...&quot;
    firewall-cmd --list-all

}

finally(){

    cd ${cur_dir}
    rm -fr ${cur_dir}/l2tp
    # create l2tp command
    cp -f ${cur_dir}/`basename $0` /usr/bin/l2tp

    echo &quot;Please wait a moment...&quot;
    sleep 5
    ipsec verify
    echo
    echo &quot;###############################################################&quot;
    echo &quot;# L2TP VPN Auto Installer                                     #&quot;
    echo &quot;# System Supported: CentOS 6+ / Debian 7+ / Ubuntu 12+        #&quot;
    echo &quot;# Intro: https://teddysun.com/448.html                        #&quot;
    echo &quot;# Author: Teddysun &lt;i@teddysun.com&gt;                           #&quot;
    echo &quot;###############################################################&quot;
    echo &quot;If there is no [FAILED] above, you can connect to your L2TP &quot;
    echo &quot;VPN Server with the default Username/Password is below:&quot;
    echo
    echo &quot;Server IP: ${IP}&quot;
    echo &quot;PSK      : ${mypsk}&quot;
    echo &quot;Username : ${username}&quot;
    echo &quot;Password : ${password}&quot;
    echo
    echo &quot;If you want to modify user settings, please use below command(s):&quot;
    echo &quot;l2tp -a (Add a user)&quot;
    echo &quot;l2tp -d (Delete a user)&quot;
    echo &quot;l2tp -l (List all users)&quot;
    echo &quot;l2tp -m (Modify a user password)&quot;
    echo
    echo &quot;Welcome to visit our website: https://teddysun.com/448.html&quot;
    echo &quot;Enjoy it!&quot;
    echo
}


l2tp(){
    clear
    echo
    echo &quot;###############################################################&quot;
    echo &quot;# L2TP VPN Auto Installer                                     #&quot;
    echo &quot;# System Supported: CentOS 6+ / Debian 7+ / Ubuntu 12+        #&quot;
    echo &quot;# Intro: https://teddysun.com/448.html                        #&quot;
    echo &quot;# Author: Teddysun &lt;i@teddysun.com&gt;                           #&quot;
    echo &quot;###############################################################&quot;
    echo
    rootness
    tunavailable
    disable_selinux
    version_check
    get_os_info
    preinstall_l2tp
    install_l2tp
    finally
}

list_users(){
    if [ ! -f /etc/ppp/chap-secrets ];then
        echo &quot;Error: /etc/ppp/chap-secrets file not found.&quot;
        exit 1
    fi
    local line=&quot;+-------------------------------------------+\n&quot;
    local string=%20s
    printf &quot;${line}|${string} |${string} |\n${line}&quot; Username Password
    grep -v &quot;^#&quot; /etc/ppp/chap-secrets | awk '{printf &quot;|'${string}' |'${string}' |\n&quot;, $1,$3}'
    printf ${line}
}

add_user(){
    while :
    do
        read -p &quot;Please input your Username:&quot; user
        if [ -z ${user} ]; then
            echo &quot;Username can not be empty&quot;
        else
            grep -w &quot;${user}&quot; /etc/ppp/chap-secrets &gt; /dev/null 2&gt;&amp;1
            if [ $? -eq 0 ];then
                echo &quot;Username (${user}) already exists. Please re-enter your username.&quot;
            else
                break
            fi
        fi
    done
    pass=`rand`
    echo &quot;Please input ${user}'s password:&quot;
    read -p &quot;(Default Password: ${pass}):&quot; tmppass
    [ ! -z ${tmppass} ] &amp;&amp; pass=${tmppass}
    echo &quot;${user}    l2tpd    ${pass}       *&quot; &gt;&gt; /etc/ppp/chap-secrets
    echo &quot;Username (${user}) add completed.&quot;
}

del_user(){
    while :
    do
        read -p &quot;Please input Username you want to delete it:&quot; user
        if [ -z ${user} ]; then
            echo &quot;Username can not be empty&quot;
        else
            grep -w &quot;${user}&quot; /etc/ppp/chap-secrets &gt;/dev/null 2&gt;&amp;1
            if [ $? -eq 0 ];then
                break
            else
                echo &quot;Username (${user}) is not exists. Please re-enter your username.&quot;
            fi
        fi
    done
    sed -i &quot;/^\&lt;${user}\&gt;/d&quot; /etc/ppp/chap-secrets
    echo &quot;Username (${user}) delete completed.&quot;
}

mod_user(){
    while :
    do
        read -p &quot;Please input Username you want to change password:&quot; user
        if [ -z ${user} ]; then
            echo &quot;Username can not be empty&quot;
        else
            grep -w &quot;${user}&quot; /etc/ppp/chap-secrets &gt;/dev/null 2&gt;&amp;1
            if [ $? -eq 0 ];then
                break
            else
                echo &quot;Username (${user}) is not exists. Please re-enter your username.&quot;
            fi
        fi
    done
    pass=`rand`
    echo &quot;Please input ${user}'s new password:&quot;
    read -p &quot;(Default Password: ${pass}):&quot; tmppass
    [ ! -z ${tmppass} ] &amp;&amp; pass=${tmppass}
    sed -i &quot;/^\&lt;${user}\&gt;/d&quot; /etc/ppp/chap-secrets
    echo &quot;${user}    l2tpd    ${pass}       *&quot; &gt;&gt; /etc/ppp/chap-secrets
    echo &quot;Username ${user}'s password has been changed.&quot;
}

# Main process
action=$1
if [ -z ${action} ] &amp;&amp; [ &quot;`basename $0`&quot; != &quot;l2tp&quot; ]; then
    action=install
fi

case ${action} in
    install)
        l2tp 2&gt;&amp;1 | tee ${cur_dir}/l2tp.log
        ;;
    -l|--list)
        list_users
        ;;
    -a|--add)
        add_user
        ;;
    -d|--del)
        del_user
        ;;
    -m|--mod)
        mod_user
        ;;
    -h|--help)
        echo &quot;Usage: `basename $0` -l,--list   List all users&quot;
        echo &quot;       `basename $0` -a,--add    Add a user&quot;
        echo &quot;       `basename $0` -d,--del    Delete a user&quot;
        echo &quot;       `basename $0` -m,--mod    Modify a user password&quot;
        echo &quot;       `basename $0` -h,--help   Print this help information&quot;
        ;;
    *)
        echo &quot;Usage: `basename $0` [-l,--list|-a,--add|-d,--del|-m,--mod|-h,--help]&quot; &amp;&amp; exit
        ;;
esac
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[内核升级]]></title>
        <id>https://orochw.github.io/post/nei-he-sheng-ji/</id>
        <link href="https://orochw.github.io/post/nei-he-sheng-ji/">
        </link>
        <updated>2021-05-17T04:09:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="操作步骤">操作步骤：</h1>
<h2 id="小版本升级">小版本升级</h2>
<h3 id="1-查看当前和可升级版本">1. 查看当前和可升级版本</h3>
<pre><code>[root@server-1 ~]# yum list kernel
Installed Packages
kernel.x86_64                           3.10.0-957.el7                                      @anaconda
Available Packages
kernel.x86_64                           3.10.0-957.5.1.el7                                  updates  
</code></pre>
<h3 id="2-升级">2. 升级</h3>
<pre><code> [root@server-1 ~]# yum update kernel -y 
</code></pre>
<h3 id="3-重启并检查">3. 重启并检查</h3>
<pre><code> [root@server-1 ~]# reboot 　　

 [root@server-1 ~]# uname -r 
</code></pre>
<p>##大版本升级</p>
<h3 id="1-载入公钥">1. 载入公钥</h3>
<pre><code>[root@server-1 ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
</code></pre>
<h3 id="2-升级安装elrepo">2. 升级安装ELRepo</h3>
<pre><code>[root@server-1 ~]# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
</code></pre>
<h3 id="3-载入elrepo-kernel元数据">3. 载入elrepo-kernel元数据</h3>
<pre><code>[root@server-1 ~]# yum --disablerepo=\* --enablerepo=elrepo-kernel repolist
</code></pre>
<h3 id="4-查看可用的rpm包">4. 查看可用的rpm包</h3>
<pre><code>[root@server-1 ~]# yum --disablerepo=\* --enablerepo=elrepo-kernel list kernel*
Installed Packages
kernel.x86_64                           3.10.0-957.el7                           @anaconda    
kernel.x86_64                           3.10.0-957.5.1.el7                       @updates     
kernel-tools.x86_64                     3.10.0-957.el7                           @anaconda    
kernel-tools-libs.x86_64                3.10.0-957.el7                           @anaconda    
Available Packages
kernel-lt.x86_64                        4.4.176-1.el7.elrepo                     elrepo-kernel
kernel-lt-devel.x86_64                  4.4.176-1.el7.elrepo                     elrepo-kernel
kernel-lt-doc.noarch                    4.4.176-1.el7.elrepo                     elrepo-kernel
kernel-lt-headers.x86_64                4.4.176-1.el7.elrepo                     elrepo-kernel
kernel-lt-tools.x86_64                  4.4.176-1.el7.elrepo                     elrepo-kernel
kernel-lt-tools-libs.x86_64             4.4.176-1.el7.elrepo                     elrepo-kernel
kernel-lt-tools-libs-devel.x86_64       4.4.176-1.el7.elrepo                     elrepo-kernel
kernel-ml.x86_64                        4.20.12-1.el7.elrepo                     elrepo-kernel　// 安装目标版本
kernel-ml-devel.x86_64                  4.20.12-1.el7.elrepo                     elrepo-kernel
kernel-ml-doc.noarch                    4.20.12-1.el7.elrepo                     elrepo-kernel
kernel-ml-headers.x86_64                4.20.12-1.el7.elrepo                     elrepo-kernel
kernel-ml-tools.x86_64                  4.20.12-1.el7.elrepo                     elrepo-kernel
kernel-ml-tools-libs.x86_64             4.20.12-1.el7.elrepo                     elrepo-kernel
kernel-ml-tools-libs-devel.x86_64       4.20.12-1.el7.elrepo                     elrepo-kernel
</code></pre>
<p>| 说明：</p>
<p>lt  ：long term support，长期支持版本；</p>
<p>ml：mainline，主线版本；</p>
<h3 id="5-安装最新版本的kernel">5. 安装最新版本的kernel</h3>
<pre><code>[root@server-1 ~]# yum --disablerepo=\* --enablerepo=elrepo-kernel install  kernel-ml.x86_64  -y
</code></pre>
<h3 id="6-删除旧版本工具包">6. 删除旧版本工具包</h3>
<pre><code>[root@server-1 ~]# yum remove kernel-tools-libs.x86_64 kernel-tools.x86_64  -y
</code></pre>
<h3 id="7-安装新版本工具包">7. 安装新版本工具包</h3>
<pre><code>[root@server-1 ~]# yum --disablerepo=\* --enablerepo=elrepo-kernel install kernel-ml-tools.x86_64  -y
</code></pre>
<h3 id="8-查看内核插入顺序">8. 查看内核插入顺序</h3>
<pre><code>[root@server-1 ~]# awk -F \' '$1==&quot;menuentry &quot; {print i++ &quot; : &quot; $2}' /etc/grub2.cfg
0 : CentOS Linux (4.20.12-1.el7.elrepo.x86_64) 7 (Core)
1 : CentOS Linux (3.10.0-957.5.1.el7.x86_64) 7 (Core)
2 : CentOS Linux (3.10.0-957.el7.x86_64) 7 (Core)
3 : CentOS Linux (0-rescue-ca0f6fb3c5f24478abc0a2e275281d7a) 7 (Core)
</code></pre>
<p>说明：默认新内核是从头插入，默认启动顺序也是从0开始（当前顺序还未生效），或者使用：</p>
<pre><code>[root@server-17 ~]# grep &quot;^menuentry&quot; /boot/grub2/grub.cfg | cut -d &quot;'&quot; -f2
CentOS Linux (4.20.12-1.el7.elrepo.x86_64) 7 (Core)
CentOS Linux (3.10.0-957.5.1.el7.x86_64) 7 (Core)
CentOS Linux (3.10.0-957.el7.x86_64) 7 (Core)
CentOS Linux (0-rescue-ca0f6fb3c5f24478abc0a2e275281d7a) 7 (Core)
</code></pre>
<p>其中文件 /etc/grub2.cfg 和 /boot/grub2/grub.cfg 内容一致。</p>
<h3 id="9-查看当前实际启动顺序">9. 查看当前实际启动顺序</h3>
<pre><code>[root@server-1 ~]# grub2-editenv list
saved_entry=CentOS Linux (3.10.0-957.5.1.el7.x86_64) 7 (Core)
</code></pre>
<h3 id="10-设置默认启动">10. 设置默认启动</h3>
<pre><code>[root@server-1 ~]# grub2-set-default 'CentOS Linux (4.20.12-1.el7.elrepo.x86_64) 7 (Core)'
[root@server-1 ~]# grub2-editenv list
saved_entry=CentOS Linux (4.20.12-1.el7.elrepo.x86_64) 7 (Core)
</code></pre>
<p>或者</p>
<pre><code>[root@server-1 ~]# vim /etc/default/grub
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR=&quot;$(sed 's, release .*$,,g' /etc/system-release)&quot;
GRUB_DEFAULT=0
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT=&quot;console&quot;
GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rd.lvm.lv=centos_master/root rd.lvm.lv=centos_master/swap rhgb quiet&quot;
GRUB_DISABLE_RECOVERY=&quot;true&quot;
</code></pre>
<h3 id="11-接下来运行下面的命令来重新创建内核配置">11. 接下来运行下面的命令来重新创建内核配置。</h3>
<pre><code>[root@node01 ~]# grub2-mkconfig -o /boot/grub2/grub.cfg
Generating grub configuration file ...
Found linux image: /boot/vmlinuz-5.12.0-1.el7.elrepo.x86_64
Found initrd image: /boot/initramfs-5.12.0-1.el7.elrepo.x86_64.img
Found linux image: /boot/vmlinuz-3.10.0-1160.el7.x86_64
Found initrd image: /boot/initramfs-3.10.0-1160.el7.x86_64.img
Found linux image: /boot/vmlinuz-0-rescue-7764c99a180d40029f34fa33f565be8e
Found initrd image: /boot/initramfs-0-rescue-7764c99a180d40029f34fa33f565be8e.img
done
</code></pre>
<h3 id="12-重启并检查">12.  重启并检查</h3>
<pre><code> [root@server-1 ~]# reboot 

 [root@server-1 ~]# uname -r 
</code></pre>
<h3 id="13-一键最新脚本">13. 一键最新脚本</h3>
<pre><code>rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
yum --disablerepo=\* --enablerepo=elrepo-kernel repolist
yum --disablerepo=\* --enablerepo=elrepo-kernel install  kernel-ml.x86_64  -y
yum remove kernel-tools-libs.x86_64 kernel-tools.x86_64  -y
yum --disablerepo=\* --enablerepo=elrepo-kernel install kernel-ml-tools.x86_64  -y
sed -i s/GRUB_DEFAULT=saved/GRUB_DEFAULT=0/g /etc/default/grub
grub2-mkconfig -o /boot/grub2/grub.cfg
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[redis一键安装脚本]]></title>
        <id>https://orochw.github.io/post/redis-yi-jian-an-zhuang-jiao-ben/</id>
        <link href="https://orochw.github.io/post/redis-yi-jian-an-zhuang-jiao-ben/">
        </link>
        <updated>2021-05-16T05:43:33.000Z</updated>
        <content type="html"><![CDATA[<h2 id="安装redis">安装redis</h2>
<pre><code>cd /opt
useradd redis
mkdir -pv /data/apps/redis/{conf,logs,data}

wget http://download.redis.io/releases/redis-5.0.0.tar.gz
tar -xf redis-5.0.0.tar.gz
cd redis-5.0.0


make install PREFIX=/data/apps/redis

cp redis.conf /data/apps/redis/conf/
chown -R redis.redis /data/apps/redis

cd /data/apps/redis
sed -i 's/appendonly no/appendonly yes/' conf/redis.conf
sed -i '/^dir/d' conf/redis.conf
echo &quot;dir /data/apps/redis/data&quot; &gt;&gt; conf/redis.conf
echo &quot;requirepass `&lt; /dev/urandom tr -cd _A-Z-a-z-0-9@#^ | head -c ${1:-20}; echo`&quot;  &gt;&gt; conf/redis.conf
sed -i 's#logfile &quot;&quot;#logfile &quot;/data/apps/redis/logs/redis.log&quot;#g' conf/redis.conf
sed -i 's/bind 127.0.0.1/bind 0.0.0.0/' conf/redis.conf
sed -i 's/protected-mode yes/protected-mode no/' conf/redis.conf



cat &lt;&lt;EOF &gt; /usr/lib/systemd/system/redis.service
[Unit]
Description=Redis Server Manager
After=syslog.target
After=network.target

[Service]
Type=simple
User=redis
Group=redis
PIDFile=/var/run/redis_6379.pid
ExecStart=/data/apps/redis/bin/redis-server /data/apps/redis/conf/redis.conf
ExecStop=/data/apps/redis/bin/redis-cli shutdown
Restart=always
#ReadWriteDirectories=/data/apps/redis/data
[Install]
WantedBy=multi-user.target
EOF
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[新开机器所需安装]]></title>
        <id>https://orochw.github.io/post/xin-kai-ji-qi-suo-xu-an-zhuang/</id>
        <link href="https://orochw.github.io/post/xin-kai-ji-qi-suo-xu-an-zhuang/">
        </link>
        <updated>2021-05-16T05:42:09.000Z</updated>
        <content type="html"><![CDATA[<pre><code>yum install -y epel-release vim wget telnet lsof unzip ntpdate  git net-tools sysstat   gcc gcc-c++  python-pip
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jdk安装脚本]]></title>
        <id>https://orochw.github.io/post/jdk-an-zhuang-jiao-ben/</id>
        <link href="https://orochw.github.io/post/jdk-an-zhuang-jiao-ben/">
        </link>
        <updated>2021-05-16T05:41:34.000Z</updated>
        <content type="html"><![CDATA[<p>####### 安装jdk</p>
<pre><code>yum install -y java-1.8.0-openjdk  java-1.8.0-openjdk-devel.x86_64
ls -lrt /usr/bin/java 
cat &lt;&lt;'EOF' &gt; /etc/profile.d/jdk.sh
export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.275.b01-0.el7_9.x86_64/
export JRE_HOME=$JAVA_HOME/jre
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH
export PATH=$JAVA_HOME/bin:$PATH
EOF
source /etc/profile
</code></pre>
]]></content>
    </entry>
</feed>